{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = /^(.*,)+(.+)?$/.test(m.body);\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n"]}