{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nexports[\"default\"] = function (_ref) {\n  var t = _ref.types;\n\n  function isString(node) {\n    return t.isLiteral(node) && typeof node.value === \"string\";\n  }\n\n  function buildBinaryExpression(left, right) {\n    return t.binaryExpression(\"+\", left, right);\n  }\n\n  return {\n    visitor: {\n      TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {\n        var node = path.node;\n\n        var quasi = node.quasi;\n        var args = [];\n\n        var strings = [];\n        var raw = [];\n\n        var _arr = quasi.quasis;\n        for (var _i = 0; _i < _arr.length; _i++) {\n          var elem = _arr[_i];\n          strings.push(t.stringLiteral(elem.value.cooked));\n          raw.push(t.stringLiteral(elem.value.raw));\n        }\n\n        strings = t.arrayExpression(strings);\n        raw = t.arrayExpression(raw);\n\n        var templateName = \"taggedTemplateLiteral\";\n        if (state.opts.loose) templateName += \"Loose\";\n\n        var templateObject = state.file.addTemplateObject(templateName, strings, raw);\n        args.push(templateObject);\n\n        args = args.concat(quasi.expressions);\n\n        path.replaceWith(t.callExpression(node.tag, args));\n      },\n\n      TemplateLiteral: function TemplateLiteral(path, state) {\n        var nodes = [];\n\n        var expressions = path.get(\"expressions\");\n\n        var _arr2 = path.node.quasis;\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var elem = _arr2[_i2];\n          nodes.push(t.stringLiteral(elem.value.cooked));\n\n          var expr = expressions.shift();\n          if (expr) {\n            if (state.opts.spec && !expr.isBaseType(\"string\") && !expr.isBaseType(\"number\")) {\n              nodes.push(t.callExpression(t.identifier(\"String\"), [expr.node]));\n            } else {\n              nodes.push(expr.node);\n            }\n          }\n        }\n\n        // filter out empty string literals\n        nodes = nodes.filter(function (n) {\n          return !t.isLiteral(n, { value: \"\" });\n        });\n\n        // since `+` is left-to-right associative\n        // ensure the first node is a string if first/second isn't\n        if (!isString(nodes[0]) && !isString(nodes[1])) {\n          nodes.unshift(t.stringLiteral(\"\"));\n        }\n\n        if (nodes.length > 1) {\n          var root = buildBinaryExpression(nodes.shift(), nodes.shift());\n\n          for (var _i3 = 0; _i3 < nodes.length; _i3++) {\n            var node = nodes[_i3];\n            root = buildBinaryExpression(root, node);\n          }\n\n          path.replaceWith(root);\n        } else {\n          path.replaceWith(nodes[0]);\n        }\n      }\n    }\n  };\n};\n\nmodule.exports = exports[\"default\"];"]}