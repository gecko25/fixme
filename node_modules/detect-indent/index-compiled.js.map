{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,YAAY,QAAQ,WAAR,CAAZ;;;;AAIJ,IAAI,YAAY,eAAZ;;AAEJ,SAAS,WAAT,CAAqB,OAArB,EAA8B;AAC7B,KAAI,SAAS,CAAT,CADyB;AAE7B,KAAI,UAAU,CAAV,CAFyB;AAG7B,KAAI,YAAY,CAAZ,CAHyB;;AAK7B,MAAK,IAAI,CAAJ,IAAS,OAAd,EAAuB;AACtB,MAAI,SAAS,QAAQ,CAAR,CAAT,CADkB;AAEtB,MAAI,IAAI,OAAO,CAAP,CAAJ,CAFkB;AAGtB,MAAI,IAAI,OAAO,CAAP,CAAJ,CAHkB;;AAKtB,MAAI,IAAI,OAAJ,IAAe,MAAM,OAAN,IAAiB,IAAI,SAAJ,EAAe;AAClD,aAAU,CAAV,CADkD;AAElD,eAAY,CAAZ,CAFkD;AAGlD,YAAS,CAAC,CAAD,CAHyC;GAAnD;EALD;;AAYA,QAAO,MAAP,CAjB6B;CAA9B;;AAoBA,OAAO,OAAP,GAAiB,UAAU,GAAV,EAAe;AAC/B,KAAI,OAAO,GAAP,KAAe,QAAf,EAAyB;AAC5B,QAAM,IAAI,SAAJ,CAAc,mBAAd,CAAN,CAD4B;EAA7B;;;AAD+B,KAM3B,OAAO,CAAP,CAN2B;AAO/B,KAAI,SAAS,CAAT;;;AAP2B,KAU3B,OAAO,CAAP;;;;;;;;;;;AAV2B,KAqB3B,UAAU,EAAV;;;AArB2B,KAwB3B,OAAJ;;;AAxB+B,KA2B3B,QAAJ,CA3B+B;;AA6B/B,KAAI,KAAJ,CAAU,KAAV,EAAiB,OAAjB,CAAyB,UAAU,IAAV,EAAgB;AACxC,MAAI,CAAC,IAAD,EAAO;;AAEV,UAFU;GAAX;;AAKA,MAAI,MAAJ,CANwC;AAOxC,MAAI,UAAU,KAAK,KAAL,CAAW,SAAX,CAAV,CAPoC;;AASxC,MAAI,CAAC,OAAD,EAAU;AACb,YAAS,CAAT,CADa;GAAd,MAEO;AACN,YAAS,QAAQ,CAAR,EAAW,MAAX,CADH;;AAGN,OAAI,QAAQ,CAAR,CAAJ,EAAgB;AACf,aADe;IAAhB,MAEO;AACN,WADM;IAFP;GALD;;AAYA,MAAI,OAAO,SAAS,IAAT,CArB6B;AAsBxC,SAAO,MAAP,CAtBwC;;AAwBxC,MAAI,IAAJ,EAAU;;;AAGT,cAAW,OAAO,CAAP,CAHF;;AAKT,aAAU,QAAQ,WAAW,IAAX,GAAkB,CAAC,IAAD,CAApC,CALS;;AAOT,OAAI,OAAJ,EAAa;AACZ,YAAQ,CAAR,IADY;IAAb,MAEO;AACN,cAAU,QAAQ,IAAR,IAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CADJ;IAFP;GAPD,MAYO,IAAI,OAAJ,EAAa;;AAEnB,WAAQ,CAAR,KAAc,CAAC,QAAD,CAFK;GAAb;EApCiB,CAAzB,CA7B+B;;AAuE/B,KAAI,SAAS,YAAY,OAAZ,CAAT,CAvE2B;;AAyE/B,KAAI,IAAJ,CAzE+B;AA0E/B,KAAI,MAAJ,CA1E+B;AA2E/B,KAAI,CAAC,MAAD,EAAS;AACZ,SAAO,IAAP,CADY;AAEZ,WAAS,EAAT,CAFY;EAAb,MAGO,IAAI,UAAU,IAAV,EAAgB;AAC1B,SAAO,OAAP,CAD0B;AAE1B,WAAS,UAAU,GAAV,EAAe,MAAf,CAAT,CAF0B;EAApB,MAGA;AACN,SAAO,KAAP,CADM;AAEN,WAAS,UAAU,IAAV,EAAgB,MAAhB,CAAT,CAFM;EAHA;;AAQP,QAAO;AACN,UAAQ,MAAR;AACA,QAAM,IAAN;AACA,UAAQ,MAAR;EAHD,CAtF+B;CAAf","file":"index-compiled.js","sourcesContent":["'use strict';\nvar repeating = require('repeating');\n\n// detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\nvar INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n\tvar result = 0;\n\tvar maxUsed = 0;\n\tvar maxWeight = 0;\n\n\tfor (var n in indents) {\n\t\tvar indent = indents[n];\n\t\tvar u = indent[0];\n\t\tvar w = indent[1];\n\n\t\tif (u > maxUsed || u === maxUsed && w > maxWeight) {\n\t\t\tmaxUsed = u;\n\t\t\tmaxWeight = w;\n\t\t\tresult = +n;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// used to see if tabs or spaces are the most used\n\tvar tabs = 0;\n\tvar spaces = 0;\n\n\t// remember the size of previous line's indentation\n\tvar prev = 0;\n\n\t// remember how many indents/unindents as occurred for a given size\n\t// and how much lines follow a given indentation\n\t//\n\t// indents = {\n\t//    3: [1, 0],\n\t//    4: [1, 5],\n\t//    5: [1, 0],\n\t//   12: [1, 0],\n\t// }\n\tvar indents = {};\n\n\t// pointer to the array of last used indent\n\tvar current;\n\n\t// whether the last action was an indent (opposed to an unindent)\n\tvar isIndent;\n\n\tstr.split(/\\n/g).forEach(function (line) {\n\t\tif (!line) {\n\t\t\t// ignore empty lines\n\t\t\treturn;\n\t\t}\n\n\t\tvar indent;\n\t\tvar matches = line.match(INDENT_RE);\n\n\t\tif (!matches) {\n\t\t\tindent = 0;\n\t\t} else {\n\t\t\tindent = matches[0].length;\n\n\t\t\tif (matches[1]) {\n\t\t\t\tspaces++;\n\t\t\t} else {\n\t\t\t\ttabs++;\n\t\t\t}\n\t\t}\n\n\t\tvar diff = indent - prev;\n\t\tprev = indent;\n\n\t\tif (diff) {\n\t\t\t// an indent or unindent has been detected\n\n\t\t\tisIndent = diff > 0;\n\n\t\t\tcurrent = indents[isIndent ? diff : -diff];\n\n\t\t\tif (current) {\n\t\t\t\tcurrent[0]++;\n\t\t\t} else {\n\t\t\t\tcurrent = indents[diff] = [1, 0];\n\t\t\t}\n\t\t} else if (current) {\n\t\t\t// if the last action was an indent, increment the weight\n\t\t\tcurrent[1] += +isIndent;\n\t\t}\n\t});\n\n\tvar amount = getMostUsed(indents);\n\n\tvar type;\n\tvar actual;\n\tif (!amount) {\n\t\ttype = null;\n\t\tactual = '';\n\t} else if (spaces >= tabs) {\n\t\ttype = 'space';\n\t\tactual = repeating(' ', amount);\n\t} else {\n\t\ttype = 'tab';\n\t\tactual = repeating('\\t', amount);\n\t}\n\n\treturn {\n\t\tamount: amount,\n\t\ttype: type,\n\t\tindent: actual\n\t};\n};\n"]}