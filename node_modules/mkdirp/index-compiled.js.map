{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var path = require('path');\nvar fs = require('fs');\nvar _0777 = parseInt('0777', 8);\n\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;\n\nfunction mkdirP (p, opts, f, made) {\n    if (typeof opts === 'function') {\n        f = opts;\n        opts = {};\n    }\n    else if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n    \n    var cb = f || function () {};\n    p = path.resolve(p);\n    \n    xfs.mkdir(p, mode, function (er) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch (er.code) {\n            case 'ENOENT':\n                mkdirP(path.dirname(p), opts, function (er, made) {\n                    if (er) cb(er, made);\n                    else mkdirP(p, opts, cb, made);\n                });\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function (er2, stat) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made)\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\n\nmkdirP.sync = function sync (p, opts, made) {\n    if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    p = path.resolve(p);\n\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT' :\n                made = sync(path.dirname(p), opts, made);\n                sync(p, opts, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = xfs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n};\n"]}