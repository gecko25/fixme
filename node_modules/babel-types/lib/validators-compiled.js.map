{"version":3,"sources":["validators.js"],"names":[],"mappings":"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","file":"validators-compiled.js","sourcesContent":["/* eslint indent: 0 */\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"babel-runtime/helpers/interop-require-default\")[\"default\"];\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nexports.__esModule = true;\nexports.isBinding = isBinding;\nexports.isReferenced = isReferenced;\nexports.isValidIdentifier = isValidIdentifier;\nexports.isLet = isLet;\nexports.isBlockScoped = isBlockScoped;\nexports.isVar = isVar;\nexports.isSpecifierDefault = isSpecifierDefault;\nexports.isScope = isScope;\nexports.isImmutable = isImmutable;\n\nvar _retrievers = require(\"./retrievers\");\n\nvar _esutils = require(\"esutils\");\n\nvar _esutils2 = _interopRequireDefault(_esutils);\n\nvar _index = require(\"./index\");\n\nvar t = _interopRequireWildcard(_index);\n\nvar _constants = require(\"./constants\");\n\n/**\n * Check if the input `node` is a binding identifier.\n */\n\nfunction isBinding(node, parent) {\n  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];\n  if (keys) {\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var val = parent[key];\n      if (Array.isArray(val)) {\n        if (val.indexOf(node) >= 0) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Check if the input `node` is a reference to a bound variable.\n */\n\nfunction isReferenced(node, parent) {\n  switch (parent.type) {\n    // yes: object::NODE\n    // yes: NODE::callee\n    case \"BindExpression\":\n      return parent.object === node || parent.callee === node;\n\n    // yes: PARENT[NODE]\n    // yes: NODE.child\n    // no: parent.NODE\n    case \"MemberExpression\":\n    case \"JSXMemberExpression\":\n      if (parent.property === node && parent.computed) {\n        return true;\n      } else if (parent.object === node) {\n        return true;\n      } else {\n        return false;\n      }\n\n    // no: new.NODE\n    // no: NODE.target\n    case \"MetaProperty\":\n      return false;\n\n    // yes: { [NODE]: \"\" }\n    // yes: { NODE }\n    // no: { NODE: \"\" }\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return parent.computed;\n      }\n\n    // no: let NODE = init;\n    // yes: let id = NODE;\n    case \"VariableDeclarator\":\n      return parent.id !== node;\n\n    // no: function NODE() {}\n    // no: function foo(NODE) {}\n    case \"ArrowFunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      var _arr = parent.params;\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var param = _arr[_i];\n        if (param === node) return false;\n      }\n\n      return parent.id !== node;\n\n    // no: export { foo as NODE };\n    // yes: export { NODE as foo };\n    // no: export { NODE as foo } from \"foo\";\n    case \"ExportSpecifier\":\n      if (parent.source) {\n        return false;\n      } else {\n        return parent.local === node;\n      }\n\n    // no: export NODE from \"foo\";\n    // no: export * as NODE from \"foo\";\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n\n    // no: <div NODE=\"foo\" />\n    case \"JSXAttribute\":\n      return parent.name !== node;\n\n    // no: class { NODE = value; }\n    // yes: class { key = NODE; }\n    case \"ClassProperty\":\n      return parent.value === node;\n\n    // no: import NODE from \"foo\";\n    // no: import * as NODE from \"foo\";\n    // no: import { NODE as foo } from \"foo\";\n    // no: import { foo as NODE } from \"foo\";\n    // no: import NODE from \"bar\";\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n\n    // no: class NODE {}\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.id !== node;\n\n    // yes: class { [NODE](){} }\n    case \"ClassMethod\":\n    case \"ObjectMethod\":\n      return parent.key === node && parent.computed;\n\n    // no: NODE: for (;;) {}\n    case \"LabeledStatement\":\n      return false;\n\n    // no: try {} catch (NODE) {}\n    case \"CatchClause\":\n      return parent.param !== node;\n\n    // no: function foo(...NODE) {}\n    case \"RestElement\":\n      return false;\n\n    // yes: left = NODE;\n    // no: NODE = right;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n\n    // no: [NODE = foo] = [];\n    // yes: [foo = NODE] = [];\n    case \"AssignmentPattern\":\n      return parent.right === node;\n\n    // no: [NODE] = [];\n    // no: ({ NODE }) = [];\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n  }\n\n  return true;\n}\n\n/**\n * Check if the input `name` is a valid identifier name\n * and isn't a reserved word.\n */\n\nfunction isValidIdentifier(name) {\n  if (typeof name !== \"string\" || _esutils2[\"default\"].keyword.isReservedWordES6(name, true)) {\n    return false;\n  } else {\n    return _esutils2[\"default\"].keyword.isIdentifierNameES6(name);\n  }\n}\n\n/**\n * Check if the input `node` is a `let` variable declaration.\n */\n\nfunction isLet(node) {\n  return t.isVariableDeclaration(node) && (node.kind !== \"var\" || node[_constants.BLOCK_SCOPED_SYMBOL]);\n}\n\n/**\n * Check if the input `node` is block scoped.\n */\n\nfunction isBlockScoped(node) {\n  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);\n}\n\n/**\n * Check if the input `node` is a variable declaration.\n */\n\nfunction isVar(node) {\n  return t.isVariableDeclaration(node, { kind: \"var\" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];\n}\n\n/**\n * Check if the input `specifier` is a `default` import or export.\n */\n\nfunction isSpecifierDefault(specifier) {\n  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: \"default\" });\n}\n\n/**\n * Check if the input `node` is a scope.\n */\n\nfunction isScope(node, parent) {\n  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {\n    return false;\n  }\n\n  return t.isScopable(node);\n}\n\n/**\n * Check if the input `node` is definitely immutable.\n */\n\nfunction isImmutable(node) {\n  if (t.isType(node.type, \"Immutable\")) return true;\n\n  if (t.isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      // immutable!\n      return true;\n    } else {\n      // no idea...\n      return false;\n    }\n  }\n\n  return false;\n}"]}