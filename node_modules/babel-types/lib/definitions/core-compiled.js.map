{"version":3,"sources":["core.js"],"names":[],"mappings":"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","file":"core-compiled.js","sourcesContent":["/* eslint max-len: 0 */\n\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nvar _interopRequireDefault = require(\"babel-runtime/helpers/interop-require-default\")[\"default\"];\n\nvar _index = require(\"../index\");\n\nvar t = _interopRequireWildcard(_index);\n\nvar _constants = require(\"../constants\");\n\nvar _index2 = require(\"./index\");\n\nvar _index3 = _interopRequireDefault(_index2);\n\n_index3[\"default\"](\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"))),\n      \"default\": []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n\n_index3[\"default\"](\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: _index2.assertValueType(\"string\")\n    },\n    left: {\n      validate: _index2.assertNodeType(\"LVal\")\n    },\n    right: {\n      validate: _index2.assertNodeType(\"Expression\")\n    }\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"]\n});\n\n_index3[\"default\"](\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)\n    },\n    left: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    right: {\n      validate: _index2.assertNodeType(\"Expression\")\n    }\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"]\n});\n\n_index3[\"default\"](\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: _index2.assertNodeType(\"DirectiveLiteral\")\n    }\n  }\n});\n\n_index3[\"default\"](\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: _index2.assertValueType(\"string\")\n    }\n  }\n});\n\n_index3[\"default\"](\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Directive\"))),\n      \"default\": []\n    },\n    body: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"]\n});\n\n_index3[\"default\"](\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: _index2.assertNodeType(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n\n_index3[\"default\"](\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\"],\n  fields: {\n    callee: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    arguments: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Expression\", \"SpreadElement\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n\n_index3[\"default\"](\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: _index2.assertNodeType(\"Identifier\")\n    },\n    body: {\n      validate: _index2.assertNodeType(\"BlockStatement\")\n    }\n  },\n  aliases: [\"Scopable\"]\n});\n\n_index3[\"default\"](\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    consequent: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    alternate: {\n      validate: _index2.assertNodeType(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\", \"Conditional\"]\n});\n\n_index3[\"default\"](\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: _index2.assertNodeType(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n\n_index3[\"default\"](\"DebuggerStatement\", {\n  aliases: [\"Statement\"]\n});\n\n_index3[\"default\"](\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    body: {\n      validate: _index2.assertNodeType(\"Statement\")\n    }\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"]\n});\n\n_index3[\"default\"](\"EmptyStatement\", {\n  aliases: [\"Statement\"]\n});\n\n_index3[\"default\"](\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: _index2.assertNodeType(\"Expression\")\n    }\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"]\n});\n\n_index3[\"default\"](\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: _index2.assertNodeType(\"Program\")\n    }\n  }\n});\n\n_index3[\"default\"](\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: _index2.assertNodeType(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    body: {\n      validate: _index2.assertNodeType(\"Statement\")\n    }\n  }\n});\n\n_index3[\"default\"](\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: _index2.assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true\n    },\n    test: {\n      validate: _index2.assertNodeType(\"Expression\"),\n      optional: true\n    },\n    update: {\n      validate: _index2.assertNodeType(\"Expression\"),\n      optional: true\n    },\n    body: {\n      validate: _index2.assertNodeType(\"Statement\")\n    }\n  }\n});\n\n_index3[\"default\"](\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    id: {\n      validate: _index2.assertNodeType(\"Identifier\")\n    },\n    params: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"LVal\")))\n    },\n    body: {\n      validate: _index2.assertNodeType(\"BlockStatement\")\n    },\n    generator: {\n      \"default\": false,\n      validate: _index2.assertValueType(\"boolean\")\n    },\n    async: {\n      \"default\": false,\n      validate: _index2.assertValueType(\"boolean\")\n    }\n  },\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Statement\", \"Pureish\", \"Declaration\"]\n});\n\n_index3[\"default\"](\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: {\n    id: {\n      validate: _index2.assertNodeType(\"Identifier\"),\n      optional: true\n    },\n    params: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"LVal\")))\n    },\n    body: {\n      validate: _index2.assertNodeType(\"BlockStatement\")\n    },\n    generator: {\n      \"default\": false,\n      validate: _index2.assertValueType(\"boolean\")\n    },\n    async: {\n      \"default\": false,\n      validate: _index2.assertValueType(\"boolean\")\n    }\n  }\n});\n\n_index3[\"default\"](\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    name: {\n      validate: function validate(node, key, val) {\n        if (!t.isValidIdentifier(val)) {\n          // todo\n        }\n      }\n    }\n  }\n});\n\n_index3[\"default\"](\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    consequent: {\n      validate: _index2.assertNodeType(\"Statement\")\n    },\n    alternate: {\n      optional: true,\n      validate: _index2.assertNodeType(\"Statement\")\n    }\n  }\n});\n\n_index3[\"default\"](\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: _index2.assertNodeType(\"Identifier\")\n    },\n    body: {\n      validate: _index2.assertNodeType(\"Statement\")\n    }\n  }\n});\n\n_index3[\"default\"](\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: _index2.assertValueType(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n_index3[\"default\"](\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: _index2.assertValueType(\"number\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n_index3[\"default\"](\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n_index3[\"default\"](\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: _index2.assertValueType(\"boolean\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n_index3[\"default\"](\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: _index2.assertValueType(\"string\")\n    },\n    flags: {\n      validate: _index2.assertValueType(\"string\"),\n      \"default\": \"\"\n    }\n  }\n});\n\n_index3[\"default\"](\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)\n    },\n    left: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    right: {\n      validate: _index2.assertNodeType(\"Expression\")\n    }\n  }\n});\n\n_index3[\"default\"](\"MemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    property: {\n      validate: function validate(node, key, val) {\n        var expectedType = node.computed ? \"Expression\" : \"Identifier\";\n        _index2.assertNodeType(expectedType)(node, key, val);\n      }\n    },\n    computed: {\n      \"default\": false\n    }\n  }\n});\n\n_index3[\"default\"](\"NewExpression\", {\n  visitor: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    arguments: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Expression\", \"SpreadElement\")))\n    }\n  }\n});\n\n_index3[\"default\"](\"Program\", {\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\"],\n  fields: {\n    directives: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Directive\"))),\n      \"default\": []\n    },\n    body: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"FunctionParent\"]\n});\n\n_index3[\"default\"](\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"ObjectMethod\", \"ObjectProperty\", \"SpreadProperty\")))\n    }\n  }\n});\n\n_index3[\"default\"](\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\"],\n  fields: {\n    kind: {\n      validate: _index2.chain(_index2.assertValueType(\"string\"), _index2.assertOneOf(\"method\", \"get\", \"set\")),\n      \"default\": \"method\"\n    },\n    computed: {\n      validate: _index2.assertValueType(\"boolean\"),\n      \"default\": false\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    decorators: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Decorator\")))\n    },\n    body: {\n      validate: _index2.assertNodeType(\"BlockStatement\")\n    },\n    generator: {\n      \"default\": false,\n      validate: _index2.assertValueType(\"boolean\")\n    },\n    async: {\n      \"default\": false,\n      validate: _index2.assertValueType(\"boolean\")\n    }\n  },\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"UserWhitespacable\", \"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"ObjectMember\"]\n});\n\n_index3[\"default\"](\"ObjectProperty\", {\n  builder: [\"key\", \"value\", \"computed\", \"shorthand\", \"decorators\"],\n  fields: {\n    computed: {\n      validate: _index2.assertValueType(\"boolean\"),\n      \"default\": false\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    value: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    shorthand: {\n      validate: _index2.assertValueType(\"boolean\"),\n      \"default\": false\n    },\n    decorators: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Decorator\"))),\n      optional: true\n    }\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"]\n});\n\n_index3[\"default\"](\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  aliases: [\"LVal\"],\n  fields: {\n    argument: {\n      validate: _index2.assertNodeType(\"LVal\")\n    }\n  }\n});\n\n_index3[\"default\"](\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: _index2.assertNodeType(\"Expression\"),\n      optional: true\n    }\n  }\n});\n\n_index3[\"default\"](\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Expression\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n\n_index3[\"default\"](\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: _index2.assertNodeType(\"Expression\"),\n      optional: true\n    },\n    consequent: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"Statement\")))\n    }\n  }\n});\n\n_index3[\"default\"](\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    cases: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"SwitchCase\")))\n    }\n  }\n});\n\n_index3[\"default\"](\"ThisExpression\", {\n  aliases: [\"Expression\"]\n});\n\n_index3[\"default\"](\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: _index2.assertNodeType(\"Expression\")\n    }\n  }\n});\n\n// todo: at least handler or finalizer should be set to be valid\n_index3[\"default\"](\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    body: {\n      validate: _index2.assertNodeType(\"BlockStatement\")\n    },\n    handler: {\n      optional: true,\n      handler: _index2.assertNodeType(\"BlockStatement\")\n    },\n    finalizer: {\n      optional: true,\n      validate: _index2.assertNodeType(\"BlockStatement\")\n    }\n  }\n});\n\n_index3[\"default\"](\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      \"default\": true\n    },\n    argument: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"]\n});\n\n_index3[\"default\"](\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      \"default\": false\n    },\n    argument: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"]\n});\n\n_index3[\"default\"](\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    kind: {\n      validate: _index2.chain(_index2.assertValueType(\"string\"), _index2.assertOneOf(\"var\", \"let\", \"const\"))\n    },\n    declarations: {\n      validate: _index2.chain(_index2.assertValueType(\"array\"), _index2.assertEach(_index2.assertNodeType(\"VariableDeclarator\")))\n    }\n  }\n});\n\n_index3[\"default\"](\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: _index2.assertNodeType(\"LVal\")\n    },\n    init: {\n      optional: true,\n      validate: _index2.assertNodeType(\"Expression\")\n    }\n  }\n});\n\n_index3[\"default\"](\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: _index2.assertNodeType(\"Expression\")\n    },\n    body: {\n      validate: _index2.assertNodeType(\"BlockStatement\", \"Statement\")\n    }\n  }\n});\n\n_index3[\"default\"](\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      object: _index2.assertNodeType(\"Expression\")\n    },\n    body: {\n      validate: _index2.assertNodeType(\"BlockStatement\", \"Statement\")\n    }\n  }\n});"]}