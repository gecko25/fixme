{"version":3,"sources":["converters.js"],"names":[],"mappings":"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","file":"converters-compiled.js","sourcesContent":["\"use strict\";\n\nvar _Number$MAX_SAFE_INTEGER = require(\"babel-runtime/core-js/number/max-safe-integer\")[\"default\"];\n\nvar _interopRequireDefault = require(\"babel-runtime/helpers/interop-require-default\")[\"default\"];\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nexports.__esModule = true;\nexports.toComputedKey = toComputedKey;\nexports.toSequenceExpression = toSequenceExpression;\nexports.toKeyAlias = toKeyAlias;\nexports.toIdentifier = toIdentifier;\nexports.toBindingIdentifierName = toBindingIdentifierName;\nexports.toStatement = toStatement;\nexports.toExpression = toExpression;\nexports.toBlock = toBlock;\nexports.valueToNode = valueToNode;\n\nvar _lodashLangIsPlainObject = require(\"lodash/lang/isPlainObject\");\n\nvar _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);\n\nvar _lodashLangIsNumber = require(\"lodash/lang/isNumber\");\n\nvar _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);\n\nvar _lodashLangIsRegExp = require(\"lodash/lang/isRegExp\");\n\nvar _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);\n\nvar _lodashLangIsString = require(\"lodash/lang/isString\");\n\nvar _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);\n\nvar _babelTraverse = require(\"babel-traverse\");\n\nvar _babelTraverse2 = _interopRequireDefault(_babelTraverse);\n\nvar _index = require(\"./index\");\n\nvar t = _interopRequireWildcard(_index);\n\nfunction toComputedKey(node) {\n  var key = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];\n  return (function () {\n    if (!node.computed) {\n      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);\n    }\n    return key;\n  })();\n}\n\n/**\n * Turn an array of statement `nodes` into a `SequenceExpression`.\n *\n * Variable declarations are turned into simple assignments and their\n * declarations hoisted to the top of the current scope.\n *\n * Expression statements are just resolved to their expression.\n */\n\nfunction toSequenceExpression(nodes, scope) {\n  if (!nodes || !nodes.length) return;\n\n  var declars = [];\n  var bailed = false;\n\n  var result = convert(nodes);\n  if (bailed) return;\n\n  for (var i = 0; i < declars.length; i++) {\n    scope.push(declars[i]);\n  }\n\n  return result;\n\n  function convert(nodes) {\n    var ensureLastUndefined = false;\n    var exprs = [];\n\n    var _arr = nodes;\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var node = _arr[_i];\n      if (t.isExpression(node)) {\n        exprs.push(node);\n      } else if (t.isExpressionStatement(node)) {\n        exprs.push(node.expression);\n      } else if (t.isVariableDeclaration(node)) {\n        if (node.kind !== \"var\") return bailed = true; // bailed\n\n        var _arr2 = node.declarations;\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var declar = _arr2[_i2];\n          var bindings = t.getBindingIdentifiers(declar);\n          for (var key in bindings) {\n            declars.push({\n              kind: node.kind,\n              id: bindings[key]\n            });\n          }\n\n          if (declar.init) {\n            exprs.push(t.assignmentExpression(\"=\", declar.id, declar.init));\n          }\n        }\n\n        ensureLastUndefined = true;\n        continue;\n      } else if (t.isIfStatement(node)) {\n        var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();\n        var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();\n        if (!consequent || !alternate) return bailed = true;\n\n        exprs.push(t.conditionalExpression(node.test, consequent, alternate));\n      } else if (t.isBlockStatement(node)) {\n        exprs.push(convert(node.body));\n      } else if (t.isEmptyStatement(node)) {\n        // empty statement so ensure the last item is undefined if we're last\n        ensureLastUndefined = true;\n        continue;\n      } else {\n        // bailed, we can't turn this statement into an expression\n        return bailed = true;\n      }\n\n      ensureLastUndefined = false;\n    }\n\n    if (ensureLastUndefined || exprs.length === 0) {\n      exprs.push(scope.buildUndefinedNode());\n    }\n\n    //\n\n    if (exprs.length === 1) {\n      return exprs[0];\n    } else {\n      return t.sequenceExpression(exprs);\n    }\n  }\n}\n\nfunction toKeyAlias(node) {\n  var key = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];\n  return (function () {\n    var alias = undefined;\n\n    if (node.kind === \"method\") {\n      return toKeyAlias.increment() + \"\";\n    } else if (t.isIdentifier(key)) {\n      alias = key.name;\n    } else if (t.isStringLiteral(key)) {\n      alias = JSON.stringify(key.value);\n    } else {\n      alias = JSON.stringify(_babelTraverse2[\"default\"].removeProperties(t.cloneDeep(key)));\n    }\n\n    if (node.computed) {\n      alias = \"[\" + alias + \"]\";\n    }\n\n    if (node[\"static\"]) {\n      alias = \"static:\" + alias;\n    }\n\n    return alias;\n  })();\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= _Number$MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n\nfunction toIdentifier(name) {\n  name = name + \"\";\n\n  // replace all non-valid identifiers with dashes\n  name = name.replace(/[^a-zA-Z0-9$_]/g, \"-\");\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!t.isValidIdentifier(name)) {\n    name = \"_\" + name;\n  }\n\n  return name || \"_\";\n}\n\nfunction toBindingIdentifierName(name) {\n  name = toIdentifier(name);\n  if (name === \"eval\" || name === \"arguments\") name = \"_\" + name;\n  return name;\n}\n\n/**\n * [Please add a description.]\n * @returns {Object|Boolean}\n */\n\nfunction toStatement(node, ignore) {\n  if (t.isStatement(node)) {\n    return node;\n  }\n\n  var mustHaveId = false;\n  var newType = undefined;\n\n  if (t.isClass(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\";\n  } else if (t.isFunction(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\";\n  } else if (t.isAssignmentExpression(node)) {\n    return t.expressionStatement(node);\n  }\n\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(\"cannot turn \" + node.type + \" to a statement\");\n    }\n  }\n\n  node.type = newType;\n\n  return node;\n}\n\nfunction toExpression(node) {\n  if (t.isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  if (t.isClass(node)) {\n    node.type = \"ClassExpression\";\n  } else if (t.isFunction(node)) {\n    node.type = \"FunctionExpression\";\n  }\n\n  if (t.isExpression(node)) {\n    return node;\n  } else {\n    throw new Error(\"cannot turn \" + node.type + \" to an expression\");\n  }\n}\n\nfunction toBlock(node, parent) {\n  if (t.isBlockStatement(node)) {\n    return node;\n  }\n\n  if (t.isEmptyStatement(node)) {\n    node = [];\n  }\n\n  if (!Array.isArray(node)) {\n    if (!t.isStatement(node)) {\n      if (t.isFunction(parent)) {\n        node = t.returnStatement(node);\n      } else {\n        node = t.expressionStatement(node);\n      }\n    }\n\n    node = [node];\n  }\n\n  return t.blockStatement(node);\n}\n\nfunction valueToNode(value) {\n  // undefined\n  if (value === undefined) {\n    return t.identifier(\"undefined\");\n  }\n\n  // boolean\n  if (value === true || value === false) {\n    return t.booleanLiteral(value);\n  }\n\n  // null\n  if (value === null) {\n    return t.nullLiteral();\n  }\n\n  // strings\n  if (_lodashLangIsString2[\"default\"](value)) {\n    return t.stringLiteral(value);\n  }\n\n  // numbers\n  if (_lodashLangIsNumber2[\"default\"](value)) {\n    return t.numericLiteral(value);\n  }\n\n  // regexes\n  if (_lodashLangIsRegExp2[\"default\"](value)) {\n    var pattern = value.source;\n    var flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return t.regExpLiteral(pattern, flags);\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    return t.arrayExpression(value.map(t.valueToNode));\n  }\n\n  // object\n  if (_lodashLangIsPlainObject2[\"default\"](value)) {\n    var props = [];\n    for (var key in value) {\n      var nodeKey = undefined;\n      if (t.isValidIdentifier(key)) {\n        nodeKey = t.identifier(key);\n      } else {\n        nodeKey = t.stringLiteral(key);\n      }\n      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));\n    }\n    return t.objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}"]}