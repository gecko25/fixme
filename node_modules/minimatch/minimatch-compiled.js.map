{"version":3,"sources":["minimatch.js"],"names":[],"mappings":"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","file":"minimatch-compiled.js","sourcesContent":["module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new Error('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var plType\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        plType = stateChar\n        patternListStack.push({\n          type: plType,\n          start: i - 1,\n          reStart: re.length\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        re += ')'\n        var pl = patternListStack.pop()\n        plType = pl.type\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        switch (plType) {\n          case '!':\n            negativeLists.push(pl)\n            re += ')[^/]*?)'\n            pl.reEnd = re.length\n            break\n          case '?':\n          case '+':\n          case '*':\n            re += plType\n            break\n          case '@': break // the default anyway\n        }\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + 3)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2})*)(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  var regExp = new RegExp('^' + re + '$', flags)\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n"]}