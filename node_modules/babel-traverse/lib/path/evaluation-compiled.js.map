{"version":3,"sources":["evaluation.js"],"names":[],"mappings":";;;;;;;AAOA;;;;AAEA,QAAQ,UAAR,GAAqB,IAArB;AACA,QAAQ,cAAR,GAAyB,cAAzB;AACA,QAAQ,QAAR,GAAmB,QAAnB;AACA,IAAI,gBAAgB,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,CAAhB;AACJ,IAAI,kBAAkB,CAAC,QAAD,CAAlB;;;;;;;;;;;;;;;;;;;;AAoBJ,SAAS,cAAT,GAA0B;AACxB,MAAI,MAAM,KAAK,QAAL,EAAN,CADoB;AAExB,MAAI,IAAI,SAAJ,EAAe,OAAO,CAAC,CAAC,IAAI,KAAJ,CAA5B;CAFF;;;;;;;;;;;;;;;;;AAoBA,SAAS,QAAT,GAAoB;AAClB,MAAI,YAAY,IAAZ,CADc;AAElB,MAAI,YAAY,SAAZ,CAFc;;AAIlB,WAAS,KAAT,CAAe,IAAf,EAAqB;AACnB,QAAI,CAAC,SAAD,EAAY,OAAhB;AACA,gBAAY,IAAZ,CAFmB;AAGnB,gBAAY,KAAZ,CAHmB;GAArB;;AAMA,MAAI,QAAQ,SAAS,IAAT,CAAR,CAVc;AAWlB,MAAI,CAAC,SAAD,EAAY,QAAQ,SAAR,CAAhB;AACA,SAAO;AACL,eAAW,SAAX;AACA,WAAO,SAAP;AACA,WAAO,KAAP;GAHF,CAZkB;;AAkBlB,WAAS,QAAT,CAAkB,IAAlB,EAAwB;AACtB,QAAI,CAAC,SAAD,EAAY,OAAhB;;AAEA,QAAI,OAAO,KAAK,IAAL,CAHW;;AAKtB,QAAI,KAAK,oBAAL,EAAJ,EAAiC;AAC/B,UAAI,QAAQ,KAAK,GAAL,CAAS,aAAT,CAAR,CAD2B;AAE/B,aAAO,SAAS,MAAM,MAAM,MAAN,GAAe,CAAf,CAAf,CAAP,CAF+B;KAAjC;;AAKA,QAAI,KAAK,eAAL,MAA0B,KAAK,gBAAL,EAA1B,IAAqD,KAAK,gBAAL,EAArD,EAA8E;AAChF,aAAO,KAAK,KAAL,CADyE;KAAlF;;AAIA,QAAI,KAAK,aAAL,EAAJ,EAA0B;AACxB,aAAO,IAAP,CADwB;KAA1B;;AAIA,QAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC5B,UAAI,MAAM,EAAN,CADwB;;AAG5B,UAAI,IAAI,CAAJ,CAHwB;AAI5B,UAAI,QAAQ,KAAK,GAAL,CAAS,aAAT,CAAR,CAJwB;;AAM5B,UAAI,OAAO,KAAK,MAAL,CANiB;AAO5B,WAAK,IAAI,KAAK,CAAL,EAAQ,KAAK,KAAK,MAAL,EAAa,IAAnC,EAAyC;AACvC,YAAI,OAAO,KAAK,EAAL,CAAP;;AADmC,YAGnC,CAAC,SAAD,EAAY,MAAhB;;;AAHuC,WAMvC,IAAO,KAAK,KAAL,CAAW,MAAX;;;AANgC,YASnC,OAAO,MAAM,GAAN,CAAP,CATmC;AAUvC,YAAI,IAAJ,EAAU,OAAO,OAAO,SAAS,IAAT,CAAP,CAAP,CAAV;OAVF;;AAaA,UAAI,CAAC,SAAD,EAAY,OAAhB;AACA,aAAO,GAAP,CArB4B;KAA9B;;AAwBA,QAAI,KAAK,uBAAL,EAAJ,EAAoC;AAClC,UAAI,aAAa,SAAS,KAAK,GAAL,CAAS,MAAT,CAAT,CAAb,CAD8B;AAElC,UAAI,CAAC,SAAD,EAAY,OAAhB;AACA,UAAI,UAAJ,EAAgB;AACd,eAAO,SAAS,KAAK,GAAL,CAAS,YAAT,CAAT,CAAP,CADc;OAAhB,MAEO;AACL,eAAO,SAAS,KAAK,GAAL,CAAS,WAAT,CAAT,CAAP,CADK;OAFP;KAHF;;AAUA,QAAI,KAAK,mBAAL,EAAJ,EAAgC;;AAE9B,aAAO,SAAS,KAAK,GAAL,CAAS,YAAT,CAAT,CAAP,CAF8B;KAAhC;;;AApDsB,QA0DlB,KAAK,kBAAL,MAA6B,CAAC,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,EAAE,QAAQ,IAAR,EAAnC,CAAD,EAAqD;AACpF,UAAI,WAAW,KAAK,GAAL,CAAS,UAAT,CAAX,CADgF;AAEpF,UAAI,SAAS,KAAK,GAAL,CAAS,QAAT,CAAT,CAFgF;;AAIpF,UAAI,OAAO,SAAP,MAAsB,SAAS,YAAT,EAAtB,EAA+C;AACjD,YAAI,SAAS,OAAO,IAAP,CAAY,KAAZ,CADoC;AAEjD,YAAI,cAAc,sDAAd,CAF6C;AAGjD,YAAI,SAAS,QAAT,IAAqB,SAAS,QAAT,EAAmB;AAC1C,iBAAO,OAAO,SAAS,IAAT,CAAc,IAAd,CAAd,CAD0C;SAA5C;OAHF;KAJF;;AAaA,QAAI,KAAK,sBAAL,EAAJ,EAAmC;AACjC,UAAI,UAAU,KAAK,KAAL,CAAW,UAAX,CAAsB,KAAK,IAAL,CAAhC,CAD6B;AAEjC,UAAI,WAAW,QAAQ,QAAR,EAAkB;AAC/B,eAAO,QAAQ,KAAR,CADwB;OAAjC,MAEO;AACL,YAAI,KAAK,IAAL,KAAc,WAAd,EAA2B;AAC7B,iBAAO,SAAP,CAD6B;SAA/B,MAEO,IAAI,KAAK,IAAL,KAAc,UAAd,EAA0B;AACnC,iBAAO,QAAP,CADmC;SAA9B,MAEA,IAAI,KAAK,IAAL,KAAc,KAAd,EAAqB;AAC9B,iBAAO,GAAP,CAD8B;SAAzB;;AAIP,YAAI,WAAW,KAAK,OAAL,EAAX,CATC;AAUL,YAAI,aAAa,IAAb,EAAmB;AACrB,iBAAO,MAAM,IAAN,CAAP,CADqB;SAAvB,MAEO;AACL,iBAAO,SAAS,QAAT,CAAP,CADK;SAFP;OAZF;KAFF;;AAsBA,QAAI,KAAK,iBAAL,CAAuB,EAAE,QAAQ,IAAR,EAAzB,CAAJ,EAA8C;AAC5C,UAAI,KAAK,QAAL,KAAkB,MAAlB,EAA0B;;AAE5B,eAAO,SAAP,CAF4B;OAA9B;;AAKA,UAAI,WAAW,KAAK,GAAL,CAAS,UAAT,CAAX,CANwC;AAO5C,UAAI,KAAK,QAAL,KAAkB,QAAlB,KAA+B,SAAS,UAAT,MAAyB,SAAS,OAAT,EAAzB,CAA/B,EAA6E;AAC/E,eAAO,UAAP,CAD+E;OAAjF;;AAIA,UAAI,MAAM,SAAS,QAAT,CAAN,CAXwC;AAY5C,UAAI,CAAC,SAAD,EAAY,OAAhB;AACA,cAAQ,KAAK,QAAL;AACN,aAAK,GAAL;AACE,iBAAO,CAAC,GAAD,CADT;AADF,aAGO,GAAL;AACE,iBAAO,CAAC,GAAD,CADT;AAHF,aAKO,GAAL;AACE,iBAAO,CAAC,GAAD,CADT;AALF,aAOO,GAAL;AACE,iBAAO,CAAC,GAAD,CADT;AAPF,aASO,QAAL;AACE,wBAAc,gDAAd,CADF;AATF,OAb4C;KAA9C;;AA2BA,QAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC5B,UAAI,MAAM,EAAN,CADwB;AAE5B,UAAI,QAAQ,KAAK,GAAL,CAAS,UAAT,CAAR,CAFwB;AAG5B,WAAK,IAAI,MAAM,CAAN,EAAS,MAAM,MAAM,MAAN,EAAc,KAAtC,EAA6C;AAC3C,YAAI,OAAO,MAAM,GAAN,CAAP,CADuC;AAE3C,eAAO,KAAK,QAAL,EAAP,CAF2C;;AAI3C,YAAI,KAAK,SAAL,EAAgB;AAClB,cAAI,IAAJ,CAAS,KAAK,KAAL,CAAT,CADkB;SAApB,MAEO;AACL,iBAAO,MAAM,IAAN,CAAP,CADK;SAFP;OAJF;AAUA,aAAO,GAAP,CAb4B;KAA9B;;AAgBA,QAAI,KAAK,kBAAL,EAAJ,EAA+B;;KAA/B;;AAIA,QAAI,KAAK,mBAAL,EAAJ,EAAgC;;;AAG9B,UAAI,eAAe,SAAf,CAH0B;AAI9B,UAAI,OAAO,SAAS,KAAK,GAAL,CAAS,MAAT,CAAT,CAAP,CAJ0B;AAK9B,UAAI,gBAAgB,SAAhB,CAL0B;AAM9B,kBAAY,YAAZ,CAN8B;AAO9B,UAAI,QAAQ,SAAS,KAAK,GAAL,CAAS,OAAT,CAAT,CAAR,CAP0B;AAQ9B,UAAI,iBAAiB,SAAjB,CAR0B;AAS9B,kBAAY,iBAAiB,cAAjB,CATkB;;AAW9B,cAAQ,KAAK,QAAL;AACN,aAAK,IAAL;;;AAGE,cAAI,QAAQ,aAAR,EAAuB;AACzB,wBAAY,IAAZ,CADyB;AAEzB,mBAAO,IAAP,CAFyB;WAA3B;;AAKA,cAAI,CAAC,SAAD,EAAY,OAAhB;;AAEA,iBAAO,QAAQ,KAAR,CAVT;AADF,aAYO,IAAL;AACE,cAAI,CAAC,IAAD,IAAS,aAAT,IAA0B,CAAC,KAAD,IAAU,cAAV,EAA0B;AACtD,wBAAY,IAAZ,CADsD;WAAxD;;AAIA,cAAI,CAAC,SAAD,EAAY,OAAhB;;AAEA,iBAAO,QAAQ,KAAR,CAPT;AAZF,OAX8B;KAAhC;;AAkCA,QAAI,KAAK,kBAAL,EAAJ,EAA+B;AAC7B,UAAI,OAAO,SAAS,KAAK,GAAL,CAAS,MAAT,CAAT,CAAP,CADyB;AAE7B,UAAI,CAAC,SAAD,EAAY,OAAhB;AACA,UAAI,QAAQ,SAAS,KAAK,GAAL,CAAS,OAAT,CAAT,CAAR,CAHyB;AAI7B,UAAI,CAAC,SAAD,EAAY,OAAhB;;AAEA,cAAQ,KAAK,QAAL;AACN,aAAK,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AADF,aAGO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AAHF,aAKO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AALF,aAOO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AAPF,aASO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AATF,aAWO,IAAL;AACE,iBAAO,KAAK,GAAL,CAAS,IAAT,EAAe,KAAf,CAAP,CADF;AAXF,aAaO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AAbF,aAeO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AAfF,aAiBO,IAAL;AACE,iBAAO,QAAQ,KAAR,CADT;AAjBF,aAmBO,IAAL;AACE,iBAAO,QAAQ,KAAR,CADT;AAnBF,aAqBO,IAAL;AACE,iBAAO,QAAQ,KAAR,CADT;AArBF,aAuBO,IAAL;AACE,iBAAO,QAAQ,KAAR,CADT;AAvBF,aAyBO,KAAL;AACE,iBAAO,SAAS,KAAT,CADT;AAzBF,aA2BO,KAAL;AACE,iBAAO,SAAS,KAAT,CADT;AA3BF,aA6BO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AA7BF,aA+BO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AA/BF,aAiCO,GAAL;AACE,iBAAO,OAAO,KAAP,CADT;AAjCF,aAmCO,IAAL;AACE,iBAAO,QAAQ,KAAR,CADT;AAnCF,aAqCO,IAAL;AACE,iBAAO,QAAQ,KAAR,CADT;AArCF,aAuCO,KAAL;AACE,iBAAO,SAAS,KAAT,CADT;AAvCF,OAN6B;KAA/B;;AAkDA,QAAI,KAAK,gBAAL,EAAJ,EAA6B;AAC3B,UAAI,SAAS,KAAK,GAAL,CAAS,QAAT,CAAT,CADuB;AAE3B,UAAI,UAAU,SAAV,CAFuB;AAG3B,UAAI,OAAO,SAAP;;;AAHuB,UAMvB,OAAO,YAAP,MAAyB,CAAC,KAAK,KAAL,CAAW,UAAX,CAAsB,OAAO,IAAP,CAAY,IAAZ,EAAkB,IAAxC,CAAD,IAAkD,cAAc,OAAd,CAAsB,OAAO,IAAP,CAAY,IAAZ,CAAtB,IAA2C,CAA3C,EAA8C;AAC3H,eAAO,OAAO,KAAK,MAAL,CAAY,IAAZ,CAAd,CAD2H;OAA7H;;AAIA,UAAI,OAAO,kBAAP,EAAJ,EAAiC;AAC/B,YAAI,SAAS,OAAO,GAAP,CAAW,QAAX,CAAT,CAD2B;AAE/B,YAAI,WAAW,OAAO,GAAP,CAAW,UAAX,CAAX;;;AAF2B,YAK3B,OAAO,YAAP,MAAyB,SAAS,YAAT,EAAzB,IAAoD,cAAc,OAAd,CAAsB,OAAO,IAAP,CAAY,IAAZ,CAAtB,IAA2C,CAA3C,IAAgD,gBAAgB,OAAhB,CAAwB,SAAS,IAAT,CAAc,IAAd,CAAxB,GAA8C,CAA9C,EAAiD;AACvJ,oBAAU,OAAO,OAAO,IAAP,CAAY,IAAZ,CAAjB,CADuJ;AAEvJ,iBAAO,QAAQ,SAAS,IAAT,CAAc,IAAd,CAAf,CAFuJ;SAAzJ;;;AAL+B,YAW3B,OAAO,SAAP,MAAsB,SAAS,YAAT,EAAtB,EAA+C;AACjD,cAAI,eAAc,OAAO,IAAP,CAAY,KAAZ,CAAd,CAD6C;AAEjD,cAAI,SAAS,QAAT,IAAqB,SAAS,QAAT,EAAmB;AAC1C,sBAAU,OAAO,IAAP,CAAY,KAAZ,CADgC;AAE1C,mBAAO,QAAQ,SAAS,IAAT,CAAc,IAAd,CAAf,CAF0C;WAA5C;SAFF;OAXF;;AAoBA,UAAI,IAAJ,EAAU;AACR,YAAI,OAAO,KAAK,GAAL,CAAS,WAAT,EAAsB,GAAtB,CAA0B,QAA1B,CAAP,CADI;AAER,YAAI,CAAC,SAAD,EAAY,OAAhB;;AAEA,eAAO,KAAK,KAAL,CAAW,OAAX,EAAoB,IAApB,CAAP,CAJQ;OAAV;KA9BF;;AAsCA,UAAM,IAAN,EAtQsB;GAAxB;CAlBF","file":"evaluation-compiled.js","sourcesContent":["/* eslint indent: 0 */\n/* eslint max-len: 0 */\n\n// This file contains Babels metainterpreter that can evaluate static code.\n\n/* eslint eqeqeq: 0 */\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.evaluateTruthy = evaluateTruthy;\nexports.evaluate = evaluate;\nvar VALID_CALLEES = [\"String\", \"Number\", \"Math\"];\nvar INVALID_METHODS = [\"random\"];\n\n/**\n * Walk the input `node` and statically evaluate if it's truthy.\n *\n * Returning `true` when we're sure that the expression will evaluate to a\n * truthy value, `false` if we're sure that it will evaluate to a falsy\n * value and `undefined` if we aren't sure. Because of this please do not\n * rely on coercion when using this method and check with === if it's false.\n *\n * For example do:\n *\n *   if (t.evaluateTruthy(node) === false) falsyLogic();\n *\n * **AND NOT**\n *\n *   if (!t.evaluateTruthy(node)) falsyLogic();\n *\n */\n\nfunction evaluateTruthy() {\n  var res = this.evaluate();\n  if (res.confident) return !!res.value;\n}\n\n/**\n * Walk the input `node` and statically evaluate it.\n *\n * Returns an object in the form `{ confident, value }`. `confident` indicates\n * whether or not we had to drop out of evaluating the expression because of\n * hitting an unknown node that we couldn't confidently find the value of.\n *\n * Example:\n *\n *   t.evaluate(parse(\"5 + 5\")) // { confident: true, value: 10 }\n *   t.evaluate(parse(\"!true\")) // { confident: true, value: false }\n *   t.evaluate(parse(\"foo + foo\")) // { confident: false, value: undefined }\n *\n */\n\nfunction evaluate() {\n  var confident = true;\n  var deoptPath = undefined;\n\n  function deopt(path) {\n    if (!confident) return;\n    deoptPath = path;\n    confident = false;\n  }\n\n  var value = evaluate(this);\n  if (!confident) value = undefined;\n  return {\n    confident: confident,\n    deopt: deoptPath,\n    value: value\n  };\n\n  function evaluate(path) {\n    if (!confident) return;\n\n    var node = path.node;\n\n    if (path.isSequenceExpression()) {\n      var exprs = path.get(\"expressions\");\n      return evaluate(exprs[exprs.length - 1]);\n    }\n\n    if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {\n      return node.value;\n    }\n\n    if (path.isNullLiteral()) {\n      return null;\n    }\n\n    if (path.isTemplateLiteral()) {\n      var str = \"\";\n\n      var i = 0;\n      var exprs = path.get(\"expressions\");\n\n      var _arr = node.quasis;\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var elem = _arr[_i];\n        // not confident, evaluated an expression we don't like\n        if (!confident) break;\n\n        // add on cooked element\n        str += elem.value.cooked;\n\n        // add on interpolated expression if it's present\n        var expr = exprs[i++];\n        if (expr) str += String(evaluate(expr));\n      }\n\n      if (!confident) return;\n      return str;\n    }\n\n    if (path.isConditionalExpression()) {\n      var testResult = evaluate(path.get(\"test\"));\n      if (!confident) return;\n      if (testResult) {\n        return evaluate(path.get(\"consequent\"));\n      } else {\n        return evaluate(path.get(\"alternate\"));\n      }\n    }\n\n    if (path.isExpressionWrapper()) {\n      // TypeCastExpression, ExpressionStatement etc\n      return evaluate(path.get(\"expression\"));\n    }\n\n    // \"foo\".length\n    if (path.isMemberExpression() && !path.parentPath.isCallExpression({ callee: node })) {\n      var property = path.get(\"property\");\n      var object = path.get(\"object\");\n\n      if (object.isLiteral() && property.isIdentifier()) {\n        var _value = object.node.value;\n        var type = typeof _value;\n        if (type === \"number\" || type === \"string\") {\n          return _value[property.node.name];\n        }\n      }\n    }\n\n    if (path.isReferencedIdentifier()) {\n      var binding = path.scope.getBinding(node.name);\n      if (binding && binding.hasValue) {\n        return binding.value;\n      } else {\n        if (node.name === \"undefined\") {\n          return undefined;\n        } else if (node.name === \"Infinity\") {\n          return Infinity;\n        } else if (node.name === \"NaN\") {\n          return NaN;\n        }\n\n        var resolved = path.resolve();\n        if (resolved === path) {\n          return deopt(path);\n        } else {\n          return evaluate(resolved);\n        }\n      }\n    }\n\n    if (path.isUnaryExpression({ prefix: true })) {\n      if (node.operator === \"void\") {\n        // we don't need to evaluate the argument to know what this will return\n        return undefined;\n      }\n\n      var argument = path.get(\"argument\");\n      if (node.operator === \"typeof\" && (argument.isFunction() || argument.isClass())) {\n        return \"function\";\n      }\n\n      var arg = evaluate(argument);\n      if (!confident) return;\n      switch (node.operator) {\n        case \"!\":\n          return !arg;\n        case \"+\":\n          return +arg;\n        case \"-\":\n          return -arg;\n        case \"~\":\n          return ~arg;\n        case \"typeof\":\n          return typeof arg;\n      }\n    }\n\n    if (path.isArrayExpression()) {\n      var arr = [];\n      var elems = path.get(\"elements\");\n      for (var _i2 = 0; _i2 < elems.length; _i2++) {\n        var elem = elems[_i2];\n        elem = elem.evaluate();\n\n        if (elem.confident) {\n          arr.push(elem.value);\n        } else {\n          return deopt(elem);\n        }\n      }\n      return arr;\n    }\n\n    if (path.isObjectExpression()) {\n      // todo\n    }\n\n    if (path.isLogicalExpression()) {\n      // If we are confident that one side of an && is false, or the left\n      // side of an || is true, we can be confident about the entire expression\n      var wasConfident = confident;\n      var left = evaluate(path.get(\"left\"));\n      var leftConfident = confident;\n      confident = wasConfident;\n      var right = evaluate(path.get(\"right\"));\n      var rightConfident = confident;\n      confident = leftConfident && rightConfident;\n\n      switch (node.operator) {\n        case \"||\":\n          // TODO consider having a \"truthy type\" that doesn't bail on\n          // left uncertainity but can still evaluate to truthy.\n          if (left && leftConfident) {\n            confident = true;\n            return left;\n          }\n\n          if (!confident) return;\n\n          return left || right;\n        case \"&&\":\n          if (!left && leftConfident || !right && rightConfident) {\n            confident = true;\n          }\n\n          if (!confident) return;\n\n          return left && right;\n      }\n    }\n\n    if (path.isBinaryExpression()) {\n      var left = evaluate(path.get(\"left\"));\n      if (!confident) return;\n      var right = evaluate(path.get(\"right\"));\n      if (!confident) return;\n\n      switch (node.operator) {\n        case \"-\":\n          return left - right;\n        case \"+\":\n          return left + right;\n        case \"/\":\n          return left / right;\n        case \"*\":\n          return left * right;\n        case \"%\":\n          return left % right;\n        case \"**\":\n          return Math.pow(left, right);\n        case \"<\":\n          return left < right;\n        case \">\":\n          return left > right;\n        case \"<=\":\n          return left <= right;\n        case \">=\":\n          return left >= right;\n        case \"==\":\n          return left == right;\n        case \"!=\":\n          return left != right;\n        case \"===\":\n          return left === right;\n        case \"!==\":\n          return left !== right;\n        case \"|\":\n          return left | right;\n        case \"&\":\n          return left & right;\n        case \"^\":\n          return left ^ right;\n        case \"<<\":\n          return left << right;\n        case \">>\":\n          return left >> right;\n        case \">>>\":\n          return left >>> right;\n      }\n    }\n\n    if (path.isCallExpression()) {\n      var callee = path.get(\"callee\");\n      var context = undefined;\n      var func = undefined;\n\n      // Number(1);\n      if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {\n        func = global[node.callee.name];\n      }\n\n      if (callee.isMemberExpression()) {\n        var object = callee.get(\"object\");\n        var property = callee.get(\"property\");\n\n        // Math.min(1, 2)\n        if (object.isIdentifier() && property.isIdentifier() && VALID_CALLEES.indexOf(object.node.name) >= 0 && INVALID_METHODS.indexOf(property.node.name) < 0) {\n          context = global[object.node.name];\n          func = context[property.node.name];\n        }\n\n        // \"abc\".charCodeAt(4)\n        if (object.isLiteral() && property.isIdentifier()) {\n          var type = typeof object.node.value;\n          if (type === \"string\" || type === \"number\") {\n            context = object.node.value;\n            func = context[property.node.name];\n          }\n        }\n      }\n\n      if (func) {\n        var args = path.get(\"arguments\").map(evaluate);\n        if (!confident) return;\n\n        return func.apply(context, args);\n      }\n    }\n\n    deopt(path);\n  }\n}"]}