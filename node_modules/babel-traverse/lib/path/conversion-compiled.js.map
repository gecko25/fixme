{"version":3,"sources":["conversion.js"],"names":[],"mappings":";;AAEA;;AAEA,IAAI,0BAA0B,QAAQ,gDAAR,EAA0D,SAA1D,CAA1B;;AAEJ,QAAQ,UAAR,GAAqB,IAArB;AACA,QAAQ,aAAR,GAAwB,aAAxB;AACA,QAAQ,WAAR,GAAsB,WAAtB;AACA,QAAQ,uBAAR,GAAkC,uBAAlC;;AAEA,IAAI,cAAc,QAAQ,aAAR,CAAd;;AAEJ,IAAI,IAAI,wBAAwB,WAAxB,CAAJ;;AAEJ,SAAS,aAAT,GAAyB;AACvB,MAAI,OAAO,KAAK,IAAL,CADY;;AAGvB,MAAI,MAAM,SAAN,CAHmB;AAIvB,MAAI,KAAK,kBAAL,EAAJ,EAA+B;AAC7B,UAAM,KAAK,QAAL,CADuB;GAA/B,MAEO,IAAI,KAAK,UAAL,MAAqB,KAAK,QAAL,EAArB,EAAsC;AAC/C,UAAM,KAAK,GAAL,CADyC;GAA1C,MAEA;AACL,UAAM,IAAI,cAAJ,CAAmB,MAAnB,CAAN,CADK;GAFA;;AAMP,MAAI,CAAC,KAAK,QAAL,EAAe;AAClB,QAAI,EAAE,YAAF,CAAe,GAAf,CAAJ,EAAyB,MAAM,EAAE,aAAF,CAAgB,IAAI,IAAJ,CAAtB,CAAzB;GADF;;AAIA,SAAO,GAAP,CAhBuB;CAAzB;;AAmBA,SAAS,WAAT,GAAuB;AACrB,SAAO,EAAE,WAAF,CAAc,KAAK,IAAL,CAArB,CADqB;CAAvB;;AAIA,SAAS,uBAAT,GAAmC;;AAEjC,MAAI,CAAC,KAAK,yBAAL,EAAD,EAAmC,OAAvC;;AAEA,OAAK,WAAL,GAJiC;;AAMjC,MAAI,OAAO,KAAK,IAAL,CANsB;;AAQjC,OAAK,UAAL,GAAkB,KAAlB,CARiC;AASjC,OAAK,IAAL,GAAY,oBAAZ,CATiC;AAUjC,OAAK,MAAL,GAAc,KAAK,MAAL,IAAe,IAAf,CAVmB;CAAnC","file":"conversion-compiled.js","sourcesContent":["// This file contains methods that convert the path node into another node or some other type of data.\n\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nexports.__esModule = true;\nexports.toComputedKey = toComputedKey;\nexports.ensureBlock = ensureBlock;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction toComputedKey() {\n  var node = this.node;\n\n  var key = undefined;\n  if (this.isMemberExpression()) {\n    key = node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!node.computed) {\n    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  return t.ensureBlock(this.node);\n}\n\nfunction arrowFunctionToShadowed() {\n  // todo: maybe error\n  if (!this.isArrowFunctionExpression()) return;\n\n  this.ensureBlock();\n\n  var node = this.node;\n\n  node.expression = false;\n  node.type = \"FunctionExpression\";\n  node.shadow = node.shadow || true;\n}"]}