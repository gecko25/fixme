{"version":3,"sources":["replacement.js"],"names":[],"mappings":"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","file":"replacement-compiled.js","sourcesContent":["/* eslint max-len: 0 */\n// This file contains methods responsible for replacing a node with another.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"babel-runtime/helpers/interop-require-default\")[\"default\"];\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nexports.__esModule = true;\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n\nvar _babelCodeFrame = require(\"babel-code-frame\");\n\nvar _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);\n\nvar _index = require(\"../index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"./index\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _babylon = require(\"babylon\");\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nvar hoistVariablesVisitor = {\n  Function: function Function(path) {\n    path.skip();\n  },\n\n  VariableDeclaration: function VariableDeclaration(path) {\n    if (path.node.kind !== \"var\") return;\n\n    var bindings = path.getBindingIdentifiers();\n    for (var key in bindings) {\n      path.scope.push({ id: bindings[key] });\n    }\n\n    var exprs = [];\n\n    var _arr = path.node.declarations;\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var declar = _arr[_i];\n      if (declar.init) {\n        exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.id, declar.init)));\n      }\n    }\n\n    path.replaceWithMultiple(exprs);\n  }\n};\n\n/**\n * Replace a node with an array of multiple. This method performs the following steps:\n *\n *  - Inherit the comments of first provided node with that of the current node.\n *  - Insert the provided nodes after the current node.\n *  - Remove the current node.\n */\n\nfunction replaceWithMultiple(nodes) {\n  this.resync();\n\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  this.node = this.container[this.key] = null;\n  this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n}\n\n/**\n * Parse a string as an expression and replace the current node with the result.\n *\n * NOTE: This is typically not a good idea to use. Building source strings when\n * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's\n * easier to use, your transforms will be extremely brittle.\n */\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = \"(\" + replacement + \")\";\n    replacement = _babylon.parse(replacement);\n  } catch (err) {\n    var loc = err.loc;\n    if (loc) {\n      err.message += \" - make sure this is an expression.\";\n      err.message += \"\\n\" + _babelCodeFrame2[\"default\"](replacement, loc.line, loc.column + 1);\n    }\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n  _index2[\"default\"].removeProperties(replacement);\n  return this.replaceWith(replacement);\n}\n\n/**\n * Replace the current node with another.\n */\n\nfunction replaceWith(replacement) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index4[\"default\"]) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return;\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n  }\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      // replacing a statement with an expression so wrap it in an expression statement\n      replacement = t.expressionStatement(replacement);\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      // replacing an expression with a statement so let's explode it\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  var oldNode = this.node;\n  if (oldNode) {\n    t.inheritsComments(replacement, oldNode);\n    t.removeComments(oldNode);\n  }\n\n  // replace the node\n  this._replaceWith(replacement);\n  this.type = replacement.type;\n\n  // potentially create new scope\n  this.setScope();\n\n  // requeue for visiting\n  this.requeue();\n}\n\n/**\n * Description\n */\n\nfunction _replaceWith(node) {\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    t.validate(this.parent, this.key, [node]);\n  } else {\n    t.validate(this.parent, this.key, node);\n  }\n\n  this.debug(function () {\n    return \"Replace with \" + (node && node.type);\n  });\n\n  this.node = this.container[this.key] = node;\n}\n\n/**\n * This method takes an array of statements nodes and then explodes it\n * into expressions. This method retains completion records which is\n * extremely important to retain original semantics.\n */\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n\n  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (t.isSequenceExpression(toSequenceExpression)) {\n    var exprs = toSequenceExpression.expressions;\n\n    if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {\n      this._maybePopFromStatements(exprs);\n    }\n\n    // could be just one element due to the previous maybe popping\n    if (exprs.length === 1) {\n      this.replaceWith(exprs[0]);\n    } else {\n      this.replaceWith(toSequenceExpression);\n    }\n  } else if (toSequenceExpression) {\n    this.replaceWith(toSequenceExpression);\n  } else {\n    var container = t.functionExpression(null, [], t.blockStatement(nodes));\n    container.shadow = true;\n\n    this.replaceWith(t.callExpression(container, []));\n    this.traverse(hoistVariablesVisitor);\n\n    // add implicit returns to all ending expression statements\n    var completionRecords = this.get(\"callee\").getCompletionRecords();\n    for (var _i2 = 0; _i2 < completionRecords.length; _i2++) {\n      var path = completionRecords[_i2];\n      if (!path.isExpressionStatement()) continue;\n\n      var loop = path.findParent(function (path) {\n        return path.isLoop();\n      });\n      if (loop) {\n        var callee = this.get(\"callee\");\n\n        var uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n        callee.get(\"body\").pushContainer(\"body\", t.returnStatement(uid));\n\n        path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", uid, path.node.expression));\n      } else {\n        path.replaceWith(t.returnStatement(path.node.expression));\n      }\n    }\n\n    return this.node;\n  }\n}\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n      this._containerInsertAfter(nodes);\n      return this.remove();\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}"]}