{"version":3,"sources":["util.js"],"names":[],"mappings":"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","file":"util-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('../../lib/source-map/util');\n\n  // This is a test mapping which maps functions from two different files\n  // (one.js and two.js) to a minified generated source.\n  //\n  // Here is one.js:\n  //\n  //   ONE.foo = function (bar) {\n  //     return baz(bar);\n  //   };\n  //\n  // Here is two.js:\n  //\n  //   TWO.inc = function (n) {\n  //     return n + 1;\n  //   };\n  //\n  // And here is the generated code (min.js):\n  //\n  //   ONE.foo=function(a){return baz(a);};\n  //   TWO.inc=function(a){return a+1;};\n  exports.testGeneratedCode = \" ONE.foo=function(a){return baz(a);};\\n\"+\n                              \" TWO.inc=function(a){return a+1;};\";\n  exports.testMap = {\n    version: 3,\n    file: 'min.js',\n    names: ['bar', 'baz', 'n'],\n    sources: ['one.js', 'two.js'],\n    sourceRoot: '/the/root',\n    mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'\n  };\n  exports.testMapWithSourcesContent = {\n    version: 3,\n    file: 'min.js',\n    names: ['bar', 'baz', 'n'],\n    sources: ['one.js', 'two.js'],\n    sourcesContent: [\n      ' ONE.foo = function (bar) {\\n' +\n      '   return baz(bar);\\n' +\n      ' };',\n      ' TWO.inc = function (n) {\\n' +\n      '   return n + 1;\\n' +\n      ' };'\n    ],\n    sourceRoot: '/the/root',\n    mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'\n  };\n  exports.emptyMap = {\n    version: 3,\n    file: 'min.js',\n    names: [],\n    sources: [],\n    mappings: ''\n  };\n\n\n  function assertMapping(generatedLine, generatedColumn, originalSource,\n                         originalLine, originalColumn, name, map, assert,\n                         dontTestGenerated, dontTestOriginal) {\n    if (!dontTestOriginal) {\n      var origMapping = map.originalPositionFor({\n        line: generatedLine,\n        column: generatedColumn\n      });\n      assert.equal(origMapping.name, name,\n                   'Incorrect name, expected ' + JSON.stringify(name)\n                   + ', got ' + JSON.stringify(origMapping.name));\n      assert.equal(origMapping.line, originalLine,\n                   'Incorrect line, expected ' + JSON.stringify(originalLine)\n                   + ', got ' + JSON.stringify(origMapping.line));\n      assert.equal(origMapping.column, originalColumn,\n                   'Incorrect column, expected ' + JSON.stringify(originalColumn)\n                   + ', got ' + JSON.stringify(origMapping.column));\n\n      var expectedSource;\n\n      if (originalSource && map.sourceRoot && originalSource.indexOf(map.sourceRoot) === 0) {\n        expectedSource = originalSource;\n      } else if (originalSource) {\n        expectedSource = map.sourceRoot\n          ? util.join(map.sourceRoot, originalSource)\n          : originalSource;\n      } else {\n        expectedSource = null;\n      }\n\n      assert.equal(origMapping.source, expectedSource,\n                   'Incorrect source, expected ' + JSON.stringify(expectedSource)\n                   + ', got ' + JSON.stringify(origMapping.source));\n    }\n\n    if (!dontTestGenerated) {\n      var genMapping = map.generatedPositionFor({\n        source: originalSource,\n        line: originalLine,\n        column: originalColumn\n      });\n      assert.equal(genMapping.line, generatedLine,\n                   'Incorrect line, expected ' + JSON.stringify(generatedLine)\n                   + ', got ' + JSON.stringify(genMapping.line));\n      assert.equal(genMapping.column, generatedColumn,\n                   'Incorrect column, expected ' + JSON.stringify(generatedColumn)\n                   + ', got ' + JSON.stringify(genMapping.column));\n    }\n  }\n  exports.assertMapping = assertMapping;\n\n  function assertEqualMaps(assert, actualMap, expectedMap) {\n    assert.equal(actualMap.version, expectedMap.version, \"version mismatch\");\n    assert.equal(actualMap.file, expectedMap.file, \"file mismatch\");\n    assert.equal(actualMap.names.length,\n                 expectedMap.names.length,\n                 \"names length mismatch: \" +\n                   actualMap.names.join(\", \") + \" != \" + expectedMap.names.join(\", \"));\n    for (var i = 0; i < actualMap.names.length; i++) {\n      assert.equal(actualMap.names[i],\n                   expectedMap.names[i],\n                   \"names[\" + i + \"] mismatch: \" +\n                     actualMap.names.join(\", \") + \" != \" + expectedMap.names.join(\", \"));\n    }\n    assert.equal(actualMap.sources.length,\n                 expectedMap.sources.length,\n                 \"sources length mismatch: \" +\n                   actualMap.sources.join(\", \") + \" != \" + expectedMap.sources.join(\", \"));\n    for (var i = 0; i < actualMap.sources.length; i++) {\n      assert.equal(actualMap.sources[i],\n                   expectedMap.sources[i],\n                   \"sources[\" + i + \"] length mismatch: \" +\n                   actualMap.sources.join(\", \") + \" != \" + expectedMap.sources.join(\", \"));\n    }\n    assert.equal(actualMap.sourceRoot,\n                 expectedMap.sourceRoot,\n                 \"sourceRoot mismatch: \" +\n                   actualMap.sourceRoot + \" != \" + expectedMap.sourceRoot);\n    assert.equal(actualMap.mappings, expectedMap.mappings,\n                 \"mappings mismatch:\\nActual:   \" + actualMap.mappings + \"\\nExpected: \" + expectedMap.mappings);\n    if (actualMap.sourcesContent) {\n      assert.equal(actualMap.sourcesContent.length,\n                   expectedMap.sourcesContent.length,\n                   \"sourcesContent length mismatch\");\n      for (var i = 0; i < actualMap.sourcesContent.length; i++) {\n        assert.equal(actualMap.sourcesContent[i],\n                     expectedMap.sourcesContent[i],\n                     \"sourcesContent[\" + i + \"] mismatch\");\n      }\n    }\n  }\n  exports.assertEqualMaps = assertEqualMaps;\n\n});\n"]}