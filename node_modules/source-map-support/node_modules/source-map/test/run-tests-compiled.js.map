{"version":3,"sources":["run-tests.js"],"names":[],"mappings":";;;;;;;;AAOA,IAAI,SAAS,QAAQ,QAAR,CAAT;AACJ,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,OAAO,QAAQ,mBAAR,CAAP;;AAEJ,SAAS,GAAT,CAAa,KAAb,EAAoB;AAClB,MAAI,QAAQ,CAAR,CADc;AAElB,MAAI,SAAS,CAAT,CAFc;;AAIlB,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,EAAc,GAAlC,EAAuC;AACrC,SAAK,IAAI,CAAJ,IAAS,MAAM,CAAN,EAAS,QAAT,EAAmB;AAC/B,UAAI,QAAQ,IAAR,CAAa,CAAb,CAAJ,EAAqB;AACnB,gBADmB;AAEnB,YAAI;AACF,gBAAM,CAAN,EAAS,QAAT,CAAkB,CAAlB,EAAqB,MAArB,EAA6B,IAA7B,EADE;AAEF,mBAFE;SAAJ,CAIA,OAAO,CAAP,EAAU;AACR,kBAAQ,GAAR,CAAY,YAAY,MAAM,CAAN,EAAS,IAAT,GAAgB,IAA5B,GAAmC,CAAnC,GAAuC,GAAvC,CAAZ,CADQ;AAER,kBAAQ,GAAR,CAAY,EAAE,KAAF,CAAZ,CAFQ;SAAV;OANF;KADF;GADF;;AAgBA,UAAQ,GAAR,CAAY,EAAZ,EApBkB;AAqBlB,UAAQ,GAAR,CAAY,SAAS,KAAT,GAAiB,KAAjB,GAAyB,gBAAzB,CAAZ,CArBkB;AAsBlB,UAAQ,GAAR,CAAY,EAAZ,EAtBkB;;AAwBlB,SAAO,QAAQ,MAAR,CAxBW;CAApB;;AA2BA,SAAS,UAAT,CAAoB,CAApB,EAAuB;AACrB,MAAI,YAAY,QAAQ,IAAR,CAAa,CAAb,CAAZ,CADiB;AAErB,SAAO,YACH,KAAK,QAAL,CAAc,SAAd,MAA6B,CAA7B,GACA,iBAAiB,IAAjB,CAAsB,CAAtB,CAFG,CAFc;CAAvB;;AAOA,SAAS,QAAT,CAAkB,CAAlB,EAAqB;AACnB,SAAO,kBAAkB,EAAE,OAAF,CAAU,OAAV,EAAmB,EAAnB,CAAlB,CADY;CAArB;;AAIA,IAAI,WAAW,GAAG,WAAH,CAAe,KAAK,IAAL,CAAU,SAAV,EAAqB,YAArB,CAAf,EACZ,MADY,CACL,UADK,EAEZ,GAFY,CAER,QAFQ,CAAX;;AAIJ,IAAI,OAAO,IAAI,SAAS,GAAT,CAAa,OAAb,EAAsB,GAAtB,CAA0B,UAAU,GAAV,EAAe,CAAf,EAAkB;AACzD,SAAO;AACL,UAAM,SAAS,CAAT,CAAN;AACA,cAAU,GAAV;GAFF,CADyD;CAAlB,CAA9B,CAAP;;AAOJ,QAAQ,IAAR,CAAa,IAAb","file":"run-tests-compiled.js","sourcesContent":["#!/usr/bin/env node\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar assert = require('assert');\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('./source-map/util');\n\nfunction run(tests) {\n  var total = 0;\n  var passed = 0;\n\n  for (var i = 0; i < tests.length; i++) {\n    for (var k in tests[i].testCase) {\n      if (/^test/.test(k)) {\n        total++;\n        try {\n          tests[i].testCase[k](assert, util);\n          passed++;\n        }\n        catch (e) {\n          console.log('FAILED ' + tests[i].name + ': ' + k + '!');\n          console.log(e.stack);\n        }\n      }\n    }\n  }\n\n  console.log('');\n  console.log(passed + ' / ' + total + ' tests passed.');\n  console.log('');\n\n  return total - passed;\n}\n\nfunction isTestFile(f) {\n  var testToRun = process.argv[2];\n  return testToRun\n    ? path.basename(testToRun) === f\n    : /^test\\-.*?\\.js/.test(f);\n}\n\nfunction toModule(f) {\n  return './source-map/' + f.replace(/\\.js$/, '');\n}\n\nvar requires = fs.readdirSync(path.join(__dirname, 'source-map'))\n  .filter(isTestFile)\n  .map(toModule);\n\nvar code = run(requires.map(require).map(function (mod, i) {\n  return {\n    name: requires[i],\n    testCase: mod\n  };\n}));\n\nprocess.exit(code);\n"]}