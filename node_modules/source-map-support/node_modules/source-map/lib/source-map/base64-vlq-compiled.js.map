{"version":3,"sources":["base64-vlq.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAI,OAAO,MAAP,KAAkB,UAAlB,EAA8B;AAC9B,MAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,EAA4B,OAA5B,CAAT,CAD0B;CAAlC;AAGA,OAAO,UAAU,OAAV,EAAmB,OAAnB,EAA4B,MAA5B,EAAoC;;AAEzC,MAAI,SAAS,QAAQ,UAAR,CAAT;;;;;;;;;;;;;;AAFqC,MAgBrC,iBAAiB,CAAjB;;;AAhBqC,MAmBrC,WAAW,KAAK,cAAL;;;AAnB0B,MAsBrC,gBAAgB,WAAW,CAAX;;;AAtBqB,MAyBrC,uBAAuB,QAAvB;;;;;;;;AAzBqC,WAiChC,WAAT,CAAqB,MAArB,EAA6B;AAC3B,WAAO,SAAS,CAAT,GACH,CAAC,CAAE,MAAD,IAAY,CAAb,CAAD,GAAmB,CAAnB,GACA,CAAC,UAAU,CAAV,CAAD,GAAgB,CAAhB,CAHuB;GAA7B;;;;;;;;AAjCyC,WA6ChC,aAAT,CAAuB,MAAvB,EAA+B;AAC7B,QAAI,aAAa,CAAC,SAAS,CAAT,CAAD,KAAiB,CAAjB,CADY;AAE7B,QAAI,UAAU,UAAU,CAAV,CAFe;AAG7B,WAAO,aACH,CAAC,OAAD,GACA,OAFG,CAHsB;GAA/B;;;;;AA7CyC,SAwDzC,CAAQ,MAAR,GAAiB,SAAS,gBAAT,CAA0B,MAA1B,EAAkC;AACjD,QAAI,UAAU,EAAV,CAD6C;AAEjD,QAAI,KAAJ,CAFiD;;AAIjD,QAAI,MAAM,YAAY,MAAZ,CAAN,CAJ6C;;AAMjD,OAAG;AACD,cAAQ,MAAM,aAAN,CADP;AAED,eAAS,cAAT,CAFC;AAGD,UAAI,MAAM,CAAN,EAAS;;;AAGX,iBAAS,oBAAT,CAHW;OAAb;AAKA,iBAAW,OAAO,MAAP,CAAc,KAAd,CAAX,CARC;KAAH,QASS,MAAM,CAAN,EAfwC;;AAiBjD,WAAO,OAAP,CAjBiD;GAAlC;;;;;;AAxDwB,SAgFzC,CAAQ,MAAR,GAAiB,SAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC/C,QAAI,IAAI,CAAJ,CAD2C;AAE/C,QAAI,SAAS,KAAK,MAAL,CAFkC;AAG/C,QAAI,SAAS,CAAT,CAH2C;AAI/C,QAAI,QAAQ,CAAR,CAJ2C;AAK/C,QAAI,YAAJ,EAAkB,KAAlB,CAL+C;;AAO/C,OAAG;AACD,UAAI,KAAK,MAAL,EAAa;AACf,cAAM,IAAI,KAAJ,CAAU,4CAAV,CAAN,CADe;OAAjB;AAGA,cAAQ,OAAO,MAAP,CAAc,KAAK,MAAL,CAAY,GAAZ,CAAd,CAAR,CAJC;AAKD,qBAAe,CAAC,EAAE,QAAQ,oBAAR,CAAF,CALf;AAMD,eAAS,aAAT,CANC;AAOD,eAAS,UAAU,SAAS,KAAT,CAAV,CAPR;AAQD,eAAS,cAAT,CARC;KAAH,QASS,YATT,EAP+C;;AAkB/C,WAAO;AACL,aAAO,cAAc,MAAd,CAAP;AACA,YAAM,KAAK,KAAL,CAAW,CAAX,CAAN;KAFF,CAlB+C;GAAhC,CAhFwB;CAApC,CAAP","file":"base64-vlq-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var base64 = require('./base64');\n\n  // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n  // length quantities we use in the source map spec, the first bit is the sign,\n  // the next four bits are the actual value, and the 6th bit is the\n  // continuation bit. The continuation bit tells us whether there are more\n  // digits in this value following this digit.\n  //\n  //   Continuation\n  //   |    Sign\n  //   |    |\n  //   V    V\n  //   101011\n\n  var VLQ_BASE_SHIFT = 5;\n\n  // binary: 100000\n  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n  // binary: 011111\n  var VLQ_BASE_MASK = VLQ_BASE - 1;\n\n  // binary: 100000\n  var VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n  /**\n   * Converts from a two-complement value to a value where the sign bit is\n   * is placed in the least significant bit.  For example, as decimals:\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n   */\n  function toVLQSigned(aValue) {\n    return aValue < 0\n      ? ((-aValue) << 1) + 1\n      : (aValue << 1) + 0;\n  }\n\n  /**\n   * Converts to a two-complement value from a value where the sign bit is\n   * is placed in the least significant bit.  For example, as decimals:\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n   */\n  function fromVLQSigned(aValue) {\n    var isNegative = (aValue & 1) === 1;\n    var shifted = aValue >> 1;\n    return isNegative\n      ? -shifted\n      : shifted;\n  }\n\n  /**\n   * Returns the base 64 VLQ encoded value.\n   */\n  exports.encode = function base64VLQ_encode(aValue) {\n    var encoded = \"\";\n    var digit;\n\n    var vlq = toVLQSigned(aValue);\n\n    do {\n      digit = vlq & VLQ_BASE_MASK;\n      vlq >>>= VLQ_BASE_SHIFT;\n      if (vlq > 0) {\n        // There are still more digits in this value, so we must make sure the\n        // continuation bit is marked.\n        digit |= VLQ_CONTINUATION_BIT;\n      }\n      encoded += base64.encode(digit);\n    } while (vlq > 0);\n\n    return encoded;\n  };\n\n  /**\n   * Decodes the next base 64 VLQ value from the given string and returns the\n   * value and the rest of the string.\n   */\n  exports.decode = function base64VLQ_decode(aStr) {\n    var i = 0;\n    var strLen = aStr.length;\n    var result = 0;\n    var shift = 0;\n    var continuation, digit;\n\n    do {\n      if (i >= strLen) {\n        throw new Error(\"Expected more digits in base 64 VLQ value.\");\n      }\n      digit = base64.decode(aStr.charAt(i++));\n      continuation = !!(digit & VLQ_CONTINUATION_BIT);\n      digit &= VLQ_BASE_MASK;\n      result = result + (digit << shift);\n      shift += VLQ_BASE_SHIFT;\n    } while (continuation);\n\n    return {\n      value: fromVLQSigned(result),\n      rest: aStr.slice(i)\n    };\n  };\n\n});\n"]}