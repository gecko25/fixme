{"version":3,"sources":["source-node.js"],"names":[],"mappings":"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","file":"source-node-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n  var util = require('./util');\n\n  /**\n   * SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.\n   */\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine === undefined ? null : aLine;\n    this.column = aColumn === undefined ? null : aColumn;\n    this.source = aSource === undefined ? null : aSource;\n    this.name = aName === undefined ? null : aName;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   */\n  SourceNode.fromStringWithSourceMap =\n    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode();\n\n      // The generated code\n      // Processed fragments are removed from this array.\n      var remainingLines = aGeneratedCode.split('\\n');\n\n      // We need to remember the position of \"remainingLines\"\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n      // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n      var lastMapping = null;\n\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping === null) {\n          // We add the generated code until the first mapping\n          // to the SourceNode without any mapping.\n          // Each line is added as separate string.\n          while (lastGeneratedLine < mapping.generatedLine) {\n            node.add(remainingLines.shift() + \"\\n\");\n            lastGeneratedLine++;\n          }\n          if (lastGeneratedColumn < mapping.generatedColumn) {\n            var nextLine = remainingLines[0];\n            node.add(nextLine.substr(0, mapping.generatedColumn));\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n          }\n        } else {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            var code = \"\";\n            // Associate full lines with \"lastMapping\"\n            do {\n              code += remainingLines.shift() + \"\\n\";\n              lastGeneratedLine++;\n              lastGeneratedColumn = 0;\n            } while (lastGeneratedLine < mapping.generatedLine);\n            // When we reached the correct line, we add code until we\n            // reach the correct column too.\n            if (lastGeneratedColumn < mapping.generatedColumn) {\n              var nextLine = remainingLines[0];\n              code += nextLine.substr(0, mapping.generatedColumn);\n              remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n              lastGeneratedColumn = mapping.generatedColumn;\n            }\n            // Create the SourceNode.\n            addMappingWithCode(lastMapping, code);\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            var nextLine = remainingLines[0];\n            var code = nextLine.substr(0, mapping.generatedColumn -\n                                          lastGeneratedColumn);\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                                                lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n          }\n        }\n        lastMapping = mapping;\n      }, this);\n      // We have processed all mappings.\n      // Associate the remaining code in the current line with \"lastMapping\"\n      // and add the remaining lines without any mapping\n      addMappingWithCode(lastMapping, remainingLines.join(\"\\n\"));\n\n      // Copy sourcesContent into SourceNode\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content) {\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n\n      return node;\n\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          node.add(new SourceNode(mapping.originalLine,\n                                  mapping.originalColumn,\n                                  mapping.source,\n                                  code,\n                                  mapping.name));\n        }\n      }\n    };\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    }\n    else if (aChunk instanceof SourceNode || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (var i = aChunk.length-1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    }\n    else if (aChunk instanceof SourceNode || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk instanceof SourceNode) {\n        chunk.walk(aFn);\n      }\n      else {\n        if (chunk !== '') {\n          aFn(chunk, { source: this.source,\n                       line: this.line,\n                       column: this.column,\n                       name: this.name });\n        }\n      }\n    }\n  };\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len-1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  };\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild instanceof SourceNode) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    }\n    else if (typeof lastChild === 'string') {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    }\n    else {\n      this.children.push(''.replace(aPattern, aReplacement));\n    }\n    return this;\n  };\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  SourceNode.prototype.setSourceContent =\n    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    };\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walkSourceContents =\n    function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i] instanceof SourceNode) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    };\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  };\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if(lastOriginalSource !== original.source\n           || lastOriginalLine !== original.line\n           || lastOriginalColumn !== original.column\n           || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      chunk.split('').forEach(function (ch) {\n        if (ch === '\\n') {\n          generated.line++;\n          generated.column = 0;\n        } else {\n          generated.column++;\n        }\n      });\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map: map };\n  };\n\n  exports.SourceNode = SourceNode;\n\n});\n"]}