{"version":3,"sources":["base64.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,OAAO,MAAP,KAAkB,UAAlB,EAA8B;AAC9B,MAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,EAA4B,OAA5B,CAAT,CAD0B;CAAlC;AAGA,OAAO,UAAU,OAAV,EAAmB,OAAnB,EAA4B,MAA5B,EAAoC;;AAEzC,MAAI,eAAe,EAAf,CAFqC;AAGzC,MAAI,eAAe,EAAf,CAHqC;;AAKzC,qEACG,KADH,CACS,EADT,EAEG,OAFH,CAEW,UAAU,EAAV,EAAc,KAAd,EAAqB;AAC5B,iBAAa,EAAb,IAAmB,KAAnB,CAD4B;AAE5B,iBAAa,KAAb,IAAsB,EAAtB,CAF4B;GAArB,CAFX;;;;;AALyC,SAezC,CAAQ,MAAR,GAAiB,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC/C,QAAI,WAAW,YAAX,EAAyB;AAC3B,aAAO,aAAa,OAAb,CAAP,CAD2B;KAA7B;AAGA,UAAM,IAAI,SAAJ,CAAc,+BAA+B,OAA/B,CAApB,CAJ+C;GAAhC;;;;;AAfwB,SAyBzC,CAAQ,MAAR,GAAiB,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC7C,QAAI,SAAS,YAAT,EAAuB;AACzB,aAAO,aAAa,KAAb,CAAP,CADyB;KAA3B;AAGA,UAAM,IAAI,SAAJ,CAAc,gCAAgC,KAAhC,CAApB,CAJ6C;GAA9B,CAzBwB;CAApC,CAAP","file":"base64-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var charToIntMap = {};\n  var intToCharMap = {};\n\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    .split('')\n    .forEach(function (ch, index) {\n      charToIntMap[ch] = index;\n      intToCharMap[index] = ch;\n    });\n\n  /**\n   * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n   */\n  exports.encode = function base64_encode(aNumber) {\n    if (aNumber in intToCharMap) {\n      return intToCharMap[aNumber];\n    }\n    throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n  };\n\n  /**\n   * Decode a single base 64 digit to an integer.\n   */\n  exports.decode = function base64_decode(aChar) {\n    if (aChar in charToIntMap) {\n      return charToIntMap[aChar];\n    }\n    throw new TypeError(\"Not a valid base 64 digit: \" + aChar);\n  };\n\n});\n"]}