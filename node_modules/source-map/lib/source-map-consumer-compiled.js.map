{"version":3,"sources":["source-map-consumer.js"],"names":[],"mappings":"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","file":"source-map-consumer-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n{\n  var util = require('./util');\n  var binarySearch = require('./binary-search');\n  var ArraySet = require('./array-set').ArraySet;\n  var base64VLQ = require('./base64-vlq');\n  var quickSort = require('./quick-sort').quickSort;\n\n  function SourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    return sourceMap.sections != null\n      ? new IndexedSourceMapConsumer(sourceMap)\n      : new BasicSourceMapConsumer(sourceMap);\n  }\n\n  SourceMapConsumer.fromSourceMap = function(aSourceMap) {\n    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n  }\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  SourceMapConsumer.prototype._version = 3;\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n  SourceMapConsumer.prototype.__generatedMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n    get: function () {\n      if (!this.__generatedMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__generatedMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype.__originalMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n    get: function () {\n      if (!this.__originalMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__originalMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype._charIsMappingSeparator =\n    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  SourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    };\n\n  SourceMapConsumer.GENERATED_ORDER = 1;\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\n\n  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;\n  SourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  SourceMapConsumer.prototype.eachMapping =\n    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n      var mappings;\n      switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n      }\n\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function (mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        if (source != null && sourceRoot != null) {\n          source = util.join(sourceRoot, source);\n        }\n        return {\n          source: source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    };\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: Optional. the column number in the original source.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.allGeneratedPositionsFor =\n    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, 'line');\n\n      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n      // returns the index of the closest mapping less than the needle. By\n      // setting needle.originalColumn to 0, we thus find the last mapping for\n      // the given line, provided such a mapping exists.\n      var needle = {\n        source: util.getArg(aArgs, 'source'),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, 'column', 0)\n      };\n\n      if (this.sourceRoot != null) {\n        needle.source = util.relative(this.sourceRoot, needle.source);\n      }\n      if (!this._sources.has(needle.source)) {\n        return [];\n      }\n      needle.source = this._sources.indexOf(needle.source);\n\n      var mappings = [];\n\n      var index = this._findMapping(needle,\n                                    this._originalMappings,\n                                    \"originalLine\",\n                                    \"originalColumn\",\n                                    util.compareByOriginalPositions,\n                                    binarySearch.LEAST_UPPER_BOUND);\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (aArgs.column === undefined) {\n          var originalLine = mapping.originalLine;\n\n          // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we found. Since\n          // mappings are sorted, this is guaranteed to find all mappings for\n          // the line we found.\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, 'generatedLine', null),\n              column: util.getArg(mapping, 'generatedColumn', null),\n              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n            });\n\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n\n          // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we were searching for.\n          // Since mappings are sorted, this is guaranteed to find all mappings for\n          // the line we are searching for.\n          while (mapping &&\n                 mapping.originalLine === line &&\n                 mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, 'generatedLine', null),\n              column: util.getArg(mapping, 'generatedColumn', null),\n              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n            });\n\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n\n      return mappings;\n    };\n\n  exports.SourceMapConsumer = SourceMapConsumer;\n\n  /**\n   * A BasicSourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: Optional. The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n   */\n  function BasicSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sources = util.getArg(sourceMap, 'sources');\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n    var names = util.getArg(sourceMap, 'names', []);\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n    var mappings = util.getArg(sourceMap, 'mappings');\n    var file = util.getArg(sourceMap, 'file', null);\n\n    // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    sources = sources\n      // Some source maps produce relative source paths like \"./foo.js\" instead of\n      // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n      // See bugzil.la/1090768.\n      .map(util.normalize)\n      // Always ensure that absolute sources are internally stored relative to\n      // the source root, if the source root is absolute. Not doing this would\n      // be particularly problematic when the source root is a prefix of the\n      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n      .map(function (source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n          ? util.relative(sourceRoot, source)\n          : source;\n      });\n\n    // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n    this._names = ArraySet.fromArray(names, true);\n    this._sources = ArraySet.fromArray(sources, true);\n\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this.file = file;\n  }\n\n  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns BasicSourceMapConsumer\n   */\n  BasicSourceMapConsumer.fromSourceMap =\n    function SourceMapConsumer_fromSourceMap(aSourceMap) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                              smc.sourceRoot);\n      smc.file = aSourceMap._file;\n\n      // Because we are modifying the entries (by converting string sources and\n      // names to indices into the sources and names ArraySets), we have to make\n      // a copy of the entry or else bad things happen. Shared mutable state\n      // strikes again! See github issue #191.\n\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping;\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n\n          destOriginalMappings.push(destMapping);\n        }\n\n        destGeneratedMappings.push(destMapping);\n      }\n\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n      return smc;\n    };\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  BasicSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      return this._sources.toArray().map(function (s) {\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n      }, this);\n    }\n  });\n\n  /**\n   * Provide the JIT with a nice shape / hidden class.\n   */\n  function Mapping() {\n    this.generatedLine = 0;\n    this.generatedColumn = 0;\n    this.source = null;\n    this.originalLine = null;\n    this.originalColumn = null;\n    this.name = null;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  BasicSourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end, value;\n\n      while (index < length) {\n        if (aStr.charAt(index) === ';') {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        }\n        else if (aStr.charAt(index) === ',') {\n          index++;\n        }\n        else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n\n          // Because each offset is encoded relative to the previous one,\n          // many segments often have the same encoding. We can exploit this\n          // fact by caching the parsed variable length fields of each segment,\n          // allowing us to avoid a second parse if we encounter the same\n          // segment again.\n          for (end = index; end < length; end++) {\n            if (this._charIsMappingSeparator(aStr, end)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end);\n\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n\n            if (segment.length === 2) {\n              throw new Error('Found a source, but no line and column');\n            }\n\n            if (segment.length === 3) {\n              throw new Error('Found a source and line, but no column');\n            }\n\n            cachedSegments[str] = segment;\n          }\n\n          // Generated column.\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n\n          if (segment.length > 1) {\n            // Original source.\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n\n            // Original line.\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            // Lines are stored 0-based\n            mapping.originalLine += 1;\n\n            // Original column.\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n\n            if (segment.length > 4) {\n              // Original name.\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === 'number') {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    };\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  BasicSourceMapConsumer.prototype._findMapping =\n    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                           aColumnName, aComparator, aBias) {\n      // To return the position we are searching for, we must first find the\n      // mapping for the given position and then return the opposite position it\n      // points to. Because the mappings are sorted, we can use binary search to\n      // find the best mapping.\n\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError('Line must be greater than or equal to 1, got '\n                            + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError('Column must be greater than or equal to 0, got '\n                            + aNeedle[aColumnName]);\n      }\n\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    };\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  BasicSourceMapConsumer.prototype.computeColumnSpans =\n    function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n\n        // Mappings do not contain a field for the last generated columnt. We\n        // can come up with an optimistic estimate, however, by assuming that\n        // mappings are contiguous (i.e. given two consecutive mappings, the\n        // first mapping ends where the second one starts).\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n\n        // The last mapping for each line spans the entire line.\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    };\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  BasicSourceMapConsumer.prototype.originalPositionFor =\n    function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n      );\n\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, 'source', null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            if (this.sourceRoot != null) {\n              source = util.join(this.sourceRoot, source);\n            }\n          }\n          var name = util.getArg(mapping, 'name', null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source: source,\n            line: util.getArg(mapping, 'originalLine', null),\n            column: util.getArg(mapping, 'originalColumn', null),\n            name: name\n          };\n        }\n      }\n\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n    function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() &&\n        !this.sourcesContent.some(function (sc) { return sc == null; });\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  BasicSourceMapConsumer.prototype.sourceContentFor =\n    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n\n      if (this.sourceRoot != null) {\n        aSource = util.relative(this.sourceRoot, aSource);\n      }\n\n      if (this._sources.has(aSource)) {\n        return this.sourcesContent[this._sources.indexOf(aSource)];\n      }\n\n      var url;\n      if (this.sourceRoot != null\n          && (url = util.urlParse(this.sourceRoot))) {\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n        // many users. We can help them out when they expect file:// URIs to\n        // behave like it would if they were running a local HTTP server. See\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n        var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\"\n            && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n        }\n\n        if ((!url.path || url.path == \"/\")\n            && this._sources.has(\"/\" + aSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n        }\n      }\n\n      // This function is used recursively from\n      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n      // don't want to throw if we can't find the source - we just want to\n      // return null, so we provide a flag to exit gracefully.\n      if (nullOnMissing) {\n        return null;\n      }\n      else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  BasicSourceMapConsumer.prototype.generatedPositionFor =\n    function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, 'source');\n      if (this.sourceRoot != null) {\n        source = util.relative(this.sourceRoot, source);\n      }\n      if (!this._sources.has(source)) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      source = this._sources.indexOf(source);\n\n      var needle = {\n        source: source,\n        originalLine: util.getArg(aArgs, 'line'),\n        originalColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n      );\n\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          };\n        }\n      }\n\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    };\n\n  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n  /**\n   * An IndexedSourceMapConsumer instance represents a parsed source map which\n   * we can query for information. It differs from BasicSourceMapConsumer in\n   * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n   * input.\n   *\n   * The only parameter is a raw source map (either as a JSON string, or already\n   * parsed to an object). According to the spec for indexed source maps, they\n   * have the following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - file: Optional. The generated file this source map is associated with.\n   *   - sections: A list of section definitions.\n   *\n   * Each value under the \"sections\" field has two fields:\n   *   - offset: The offset into the original specified at which this section\n   *       begins to apply, defined as an object with a \"line\" and \"column\"\n   *       field.\n   *   - map: A source map definition. This source map could also be indexed,\n   *       but doesn't have to be.\n   *\n   * Instead of the \"map\" field, it's also possible to have a \"url\" field\n   * specifying a URL to retrieve a source map from, but that's currently\n   * unsupported.\n   *\n   * Here's an example source map, taken from the source map spec[0], but\n   * modified to omit a section which uses the \"url\" field.\n   *\n   *  {\n   *    version : 3,\n   *    file: \"app.js\",\n   *    sections: [{\n   *      offset: {line:100, column:10},\n   *      map: {\n   *        version : 3,\n   *        file: \"section.js\",\n   *        sources: [\"foo.js\", \"bar.js\"],\n   *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *        mappings: \"AAAA,E;;ABCDE;\"\n   *      }\n   *    }],\n   *  }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n   */\n  function IndexedSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sections = util.getArg(sourceMap, 'sections');\n\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n\n    var lastOffset = {\n      line: -1,\n      column: 0\n    };\n    this._sections = sections.map(function (s) {\n      if (s.url) {\n        // The url field will require support for asynchronicity.\n        // See https://github.com/mozilla/source-map/issues/16\n        throw new Error('Support for url field in sections not implemented.');\n      }\n      var offset = util.getArg(s, 'offset');\n      var offsetLine = util.getArg(offset, 'line');\n      var offsetColumn = util.getArg(offset, 'column');\n\n      if (offsetLine < lastOffset.line ||\n          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n        throw new Error('Section offsets must be ordered and non-overlapping.');\n      }\n      lastOffset = offset;\n\n      return {\n        generatedOffset: {\n          // The offset fields are 0-based, but we use 1-based indices when\n          // encoding/decoding from VLQ.\n          generatedLine: offsetLine + 1,\n          generatedColumn: offsetColumn + 1\n        },\n        consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n      }\n    });\n  }\n\n  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  IndexedSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      var sources = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n          sources.push(this._sections[i].consumer.sources[j]);\n        }\n      }\n      return sources;\n    }\n  });\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  IndexedSourceMapConsumer.prototype.originalPositionFor =\n    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      // Find the section containing the generated position we're trying to map\n      // to an original position.\n      var sectionIndex = binarySearch.search(needle, this._sections,\n        function(needle, section) {\n          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n\n          return (needle.generatedColumn -\n                  section.generatedOffset.generatedColumn);\n        });\n      var section = this._sections[sectionIndex];\n\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine -\n          (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn -\n          (section.generatedOffset.generatedLine === needle.generatedLine\n           ? section.generatedOffset.generatedColumn - 1\n           : 0),\n        bias: aArgs.bias\n      });\n    };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n    function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function (s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  IndexedSourceMapConsumer.prototype.sourceContentFor =\n    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      }\n      else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  IndexedSourceMapConsumer.prototype.generatedPositionFor =\n    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n\n        // Only consider this section if the requested source is in the list of\n        // sources of the consumer.\n        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line +\n              (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column +\n              (section.generatedOffset.generatedLine === generatedPosition.line\n               ? section.generatedOffset.generatedColumn - 1\n               : 0)\n          };\n          return ret;\n        }\n      }\n\n      return {\n        line: null,\n        column: null\n      };\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  IndexedSourceMapConsumer.prototype._parseMappings =\n    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n\n          var source = section.consumer._sources.at(mapping.source);\n          if (section.consumer.sourceRoot !== null) {\n            source = util.join(section.consumer.sourceRoot, source);\n          }\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n\n          var name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n\n          // The mappings coming from the consumer for the section have\n          // generated positions relative to the start of the section, so we\n          // need to offset them to be relative to the start of the concatenated\n          // generated file.\n          var adjustedMapping = {\n            source: source,\n            generatedLine: mapping.generatedLine +\n              (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn +\n              (section.generatedOffset.generatedLine === mapping.generatedLine\n              ? section.generatedOffset.generatedColumn - 1\n              : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name: name\n          };\n\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === 'number') {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    };\n\n  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n}\n"]}