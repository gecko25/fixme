{"version":3,"sources":["array-set.js"],"names":[],"mappings":";;;;;;;;AAMA;MACM,KADN;;;;;;;;;;;QASW,WAAT,SAAS,QAAT,GAAoB;AAClB,WAAK,MAAL,GAAc,EAAd,CADkB;AAElB,WAAK,IAAL,GAAY,EAAZ,CAFkB;KAApB;;;;;;;AARI,WAAO,QAAQ,QAAR,CAAP;AAgBJ,aAAS,SAAT,GAAqB,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,gBAApC,EAAsD;AACzE,UAAI,MAAM,IAAI,QAAJ,EAAN,CADqE;AAEzE,WAAK,IAAI,IAAI,CAAJ,EAAO,MAAM,OAAO,MAAP,EAAe,IAAI,GAAJ,EAAS,GAA9C,EAAmD;AACjD,YAAI,GAAJ,CAAQ,OAAO,CAAP,CAAR,EAAmB,gBAAnB,EADiD;OAAnD;AAGA,aAAO,GAAP,CALyE;KAAtD;;;;;;;;AAcrB,aAAS,SAAT,CAAmB,IAAnB,GAA0B,SAAS,aAAT,GAAyB;AACjD,aAAO,OAAO,mBAAP,CAA2B,KAAK,IAAL,CAA3B,CAAsC,MAAtC,CAD0C;KAAzB;;;;;;;AAS1B,aAAS,SAAT,CAAmB,GAAnB,GAAyB,SAAS,YAAT,CAAsB,IAAtB,EAA4B,gBAA5B,EAA8C;AACrE,UAAI,OAAO,KAAK,WAAL,CAAiB,IAAjB,CAAP,CADiE;AAErE,UAAI,cAAc,KAAK,IAAL,CAAU,cAAV,CAAyB,IAAzB,CAAd,CAFiE;AAGrE,UAAI,MAAM,KAAK,MAAL,CAAY,MAAZ,CAH2D;AAIrE,UAAI,CAAC,WAAD,IAAgB,gBAAhB,EAAkC;AACpC,aAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,EADoC;OAAtC;AAGA,UAAI,CAAC,WAAD,EAAc;AAChB,aAAK,IAAL,CAAU,IAAV,IAAkB,GAAlB,CADgB;OAAlB;KAPuB;;;;;;;AAiBzB,aAAS,SAAT,CAAmB,GAAnB,GAAyB,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACnD,UAAI,OAAO,KAAK,WAAL,CAAiB,IAAjB,CAAP,CAD+C;AAEnD,aAAO,KAAK,IAAL,CAAU,cAAV,CAAyB,IAAzB,CAAP,CAFmD;KAA5B;;;;;;;AAUzB,aAAS,SAAT,CAAmB,OAAnB,GAA6B,SAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC3D,UAAI,OAAO,KAAK,WAAL,CAAiB,IAAjB,CAAP,CADuD;AAE3D,UAAI,KAAK,IAAL,CAAU,cAAV,CAAyB,IAAzB,CAAJ,EAAoC;AAClC,eAAO,KAAK,IAAL,CAAU,IAAV,CAAP,CADkC;OAApC;AAGA,YAAM,IAAI,KAAJ,CAAU,MAAM,IAAN,GAAa,sBAAb,CAAhB,CAL2D;KAAhC;;;;;;;AAa7B,aAAS,SAAT,CAAmB,EAAnB,GAAwB,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACjD,UAAI,QAAQ,CAAR,IAAa,OAAO,KAAK,MAAL,CAAY,MAAZ,EAAoB;AAC1C,eAAO,KAAK,MAAL,CAAY,IAAZ,CAAP,CAD0C;OAA5C;AAGA,YAAM,IAAI,KAAJ,CAAU,2BAA2B,IAA3B,CAAhB,CAJiD;KAA3B;;;;;;;AAYxB,aAAS,SAAT,CAAmB,OAAnB,GAA6B,SAAS,gBAAT,GAA4B;AACvD,aAAO,KAAK,MAAL,CAAY,KAAZ,EAAP,CADuD;KAA5B;;AAI7B,YAAQ,QAAR,GAAmB,QAAnB;OAhGF","file":"array-set-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n{\n  var util = require('./util');\n\n  /**\n   * A data structure which is a combination of an array and a set. Adding a new\n   * member is O(1), testing for membership is O(1), and finding the index of an\n   * element is O(1). Removing elements from the set is not supported. Only\n   * strings are supported for membership.\n   */\n  function ArraySet() {\n    this._array = [];\n    this._set = {};\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  };\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  ArraySet.prototype.size = function ArraySet_size() {\n    return Object.getOwnPropertyNames(this._set).length;\n  };\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var sStr = util.toSetString(aStr);\n    var isDuplicate = this._set.hasOwnProperty(sStr);\n    var idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set[sStr] = idx;\n    }\n  };\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    var sStr = util.toSetString(aStr);\n    return this._set.hasOwnProperty(sStr);\n  };\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    var sStr = util.toSetString(aStr);\n    if (this._set.hasOwnProperty(sStr)) {\n      return this._set[sStr];\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n\n  exports.ArraySet = ArraySet;\n}\n"]}