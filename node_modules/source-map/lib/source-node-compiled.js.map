{"version":3,"sources":["source-node.js"],"names":[],"mappings":"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","file":"source-node-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n{\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n  var util = require('./util');\n\n  // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n  // operating systems these days (capturing the result).\n  var REGEX_NEWLINE = /(\\r?\\n)/;\n\n  // Newline character code for charCodeAt() comparisons\n  var NEWLINE_CODE = 10;\n\n  // Private symbol for identifying `SourceNode`s when multiple versions of\n  // the source-map library are loaded. This MUST NOT CHANGE across\n  // versions!\n  var isSourceNode = \"$$$isSourceNode$$$\";\n\n  /**\n   * SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.\n   */\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  SourceNode.fromStringWithSourceMap =\n    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode();\n\n      // All even indices of this array are one line of the generated code,\n      // while all odd indices are the newlines between two adjacent lines\n      // (since `REGEX_NEWLINE` captures its match).\n      // Processed fragments are removed from this array, by calling `shiftNextLine`.\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var shiftNextLine = function() {\n        var lineContents = remainingLines.shift();\n        // The last line of a file might not have a newline.\n        var newLine = remainingLines.shift() || \"\";\n        return lineContents + newLine;\n      };\n\n      // We need to remember the position of \"remainingLines\"\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n      // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n      var lastMapping = null;\n\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping !== null) {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            // Associate first line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n            // The remaining code is added without mapping\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            var nextLine = remainingLines[0];\n            var code = nextLine.substr(0, mapping.generatedColumn -\n                                          lastGeneratedColumn);\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                                                lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            // No more remaining code, continue\n            lastMapping = mapping;\n            return;\n          }\n        }\n        // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[0];\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      // We have processed all mappings.\n      if (remainingLines.length > 0) {\n        if (lastMapping) {\n          // Associate the remaining code in the current line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        // and add the remaining lines without any mapping\n        node.add(remainingLines.join(\"\"));\n      }\n\n      // Copy sourcesContent into SourceNode\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n\n      return node;\n\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          var source = aRelativePath\n            ? util.join(aRelativePath, mapping.source)\n            : mapping.source;\n          node.add(new SourceNode(mapping.originalLine,\n                                  mapping.originalColumn,\n                                  source,\n                                  code,\n                                  mapping.name));\n        }\n      }\n    };\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (var i = aChunk.length-1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      }\n      else {\n        if (chunk !== '') {\n          aFn(chunk, { source: this.source,\n                       line: this.line,\n                       column: this.column,\n                       name: this.name });\n        }\n      }\n    }\n  };\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len-1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  };\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    }\n    else if (typeof lastChild === 'string') {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    }\n    else {\n      this.children.push(''.replace(aPattern, aReplacement));\n    }\n    return this;\n  };\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  SourceNode.prototype.setSourceContent =\n    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    };\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walkSourceContents =\n    function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    };\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  };\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if(lastOriginalSource !== original.source\n           || lastOriginalLine !== original.line\n           || lastOriginalColumn !== original.column\n           || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (var idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map: map };\n  };\n\n  exports.SourceNode = SourceNode;\n}\n"]}