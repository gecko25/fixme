{"version":3,"sources":["test.js"],"names":[],"mappings":";AACA;;;;;AAKA,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,YAAY,QAAQ,IAAR,CAAZ;;;AAGJ,IAAI,WAAW,CACb,IADa,EAEb,CAAC,IAAD,EACA,CAAC,gBAAD,EACA,gBAJa,EAKb,CALa,EAMb,CAAC,CAAD,EACA,CAPa,EAQb,GARa,EASb,aATa;;AAWb,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,CAXa,EAYb,sBAZa,EAab,qCAba,CAAX;;;AAiBJ,IAAI,eAAe,CACjB,GADiB,EAEjB,QAFiB,EAGjB,CAAC,QAAD,EACA,GAJiB,EAKjB,IALiB,EAMjB,KANiB,EAOjB,EAPiB,EAQjB,KARiB,EASjB,IATiB,EAUjB,SAViB,EAWjB,YAAY,EAAZ,EACA,IAZiB,EAajB,EAbiB,EAcjB;AACE,WAAS,mBAAW;AAAE,WAAO,CAAP,CAAF;GAAX;CAfM,EAiBjB;AACE,WAAS,mBAAW;AAAE,WAAO,IAAE,CAAF,CAAT;GAAX;CAlBM,EAoBjB;AACE,WAAS,mBAAW;AAAE,UAAM,EAAN,CAAF;GAAX;CArBM,EAuBjB;AACE,YAAU,oBAAW;AAAE,UAAM,EAAN,CAAF;GAAX;CAxBK,EA0BjB;AACE,WAAS,mBAAW;AAAE,UAAM,EAAN,CAAF;GAAX;AACT,YAAU,oBAAW;AAAE,UAAM,EAAN,CAAF;GAAX;CA5BK,CAAf;;AAgCJ,KAAK,kCAAL,EAAyC,UAAS,CAAT,EAAY;AACnD,WAAS,OAAT,CAAiB,UAAS,GAAT,EAAc;AAC7B,MAAE,EAAF,CAAK,UAAU,GAAV,CAAL,EAAqB,KAAK,SAAL,CAAe,GAAf,CAArB,EAD6B;GAAd,CAAjB,CADmD;AAInD,IAAE,GAAF,GAJmD;CAAZ,CAAzC;;AAOA,KAAK,sCAAL,EAA6C,UAAS,CAAT,EAAY;AACvD,eAAa,OAAb,CAAqB,UAAS,GAAT,EAAc;AACjC,MAAE,KAAF,CAAQ,UAAU,GAAV,CAAR,EAAwB,KAAK,SAAL,CAAe,GAAf,CAAxB,EADiC;GAAd,CAArB,CADuD;AAIvD,IAAE,GAAF,GAJuD;CAAZ,CAA7C","file":"test-compiled.js","sourcesContent":["// jshint node:true\n\"use strict\";\n\n// Tests taken directly from es6-shim number tests\n// https://github.com/paulmillr/es6-shim/blob/master/test/number.js\n\nvar test = require(\"tape\");\nvar isInteger = require(\"./\");\n\n// Values that are integers\nvar INTEGERS = [\n  5295,\n  -5295,\n  -9007199254740991,\n  9007199254740991,\n  0,\n  -0,\n  4,\n  4.0,\n  1801439850948,\n  // Big numbers\n  Math.pow(2, 53),\n  1000000000000000000000,\n  1000000000000000000000000000000000000,\n];\n\n// Values that are not integers\nvar NON_INTEGERS = [\n  4.2,\n  Infinity,\n  -Infinity,\n  NaN,\n  true,\n  false,\n  \"\",\n  \"str\",\n  null,\n  undefined,\n  function () {},\n  /a/g,\n  {},\n  {\n    valueOf: function() { return 3; }\n  },\n  {\n    valueOf: function() { return 0/0; }\n  },\n  {\n    valueOf: function() { throw 17; }\n  },\n  {\n    toString: function() { throw 17; }\n  },\n  {\n    valueOf: function() { throw 17; },\n    toString: function() { throw 42; }\n  },\n];\n\ntest(\"integers should pass isInteger()\", function(t) {\n  INTEGERS.forEach(function(val) {\n    t.ok(isInteger(val), JSON.stringify(val));\n  });\n  t.end();\n});\n\ntest(\"non-integers should fail isInteger()\", function(t) {\n  NON_INTEGERS.forEach(function(val) {\n    t.notOk(isInteger(val), JSON.stringify(val));\n  });\n  t.end();\n});\n"]}