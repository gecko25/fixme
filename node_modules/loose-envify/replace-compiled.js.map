{"version":3,"sources":["replace.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,QAAQ,WAAR,CAAX;;AAEJ,IAAI,eAAe,oCAAf;AACJ,IAAI,mBAAmB,gBAAnB;;AAEJ,SAAS,OAAT,CAAiB,GAAjB,EAAsB,IAAtB,EAA4B;AAC1B,MAAI,CAAC,aAAa,IAAb,CAAkB,GAAlB,CAAD,EAAyB;AAC3B,WAAO,GAAP,CAD2B;GAA7B;;AAIA,MAAI,MAAM,EAAN,CALsB;AAM1B,MAAI,QAAQ,KAAK,IAAL,CAAU,UAAS,GAAT,EAAc;AAClC,WAAO,IAAI,CAAJ,IAAS,IAAI,CAAJ,CAAM,OAAN,CAAc,OAAd,MAA2B,CAAC,CAAD,CADT;GAAd,CAAlB,CANsB;;AAU1B,WAAS,SAAT,GAAqB,CAArB,CAV0B;AAW1B,MAAI,QAAQ,IAAI,KAAJ,CAAU,QAAV,CAAR,CAXsB;;AAa1B,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,EAAc,GAAlC,EAAuC;AACrC,QAAI,MAAM,CAAN,MAAiB,SAAjB,IACA,MAAM,IAAI,CAAJ,CAAN,KAAiB,GAAjB,IACA,MAAM,IAAI,CAAJ,CAAN,KAAiB,KAAjB,IACA,MAAM,IAAI,CAAJ,CAAN,KAAiB,GAAjB,EAAsB;AACxB,UAAI,gBAAgB,qBAAqB,CAAC,CAAD,EAAI,KAAzB,EAAgC,CAAhC,CAAhB,CADoB;AAExB,UAAI,gBAAgB,qBAAqB,CAArB,EAAwB,KAAxB,EAA+B,IAAI,CAAJ,CAA/C,CAFoB;AAGxB,UAAI,cAAc,qBAAqB,IAArB,EAA2B,MAAM,IAAI,CAAJ,CAAjC,EAAyC,KAAzC,CAAd,CAHoB;AAIxB,UAAI,kBAAkB,GAAlB,IACA,kBAAkB,GAAlB,IACA,kBAAkB,GAAlB,IACA,OAAO,WAAP,KAAuB,QAAvB,EAAiC;AACnC,eAAO,WAAP,CADmC;AAEnC,aAAK,CAAL,CAFmC;AAGnC,iBAHmC;OAHrC;KAPF;AAgBA,WAAO,MAAM,CAAN,CAAP,CAjBqC;GAAvC;;AAoBA,SAAO,GAAP,CAjC0B;CAA5B;;AAoCA,SAAS,oBAAT,CAA8B,GAA9B,EAAmC,KAAnC,EAA0C,CAA1C,EAA6C;AAC3C,SAAO,IAAP,EAAa;AACX,QAAI,OAAO,MAAM,KAAK,GAAL,CAAb,CADO;AAEX,QAAI,CAAC,iBAAiB,IAAjB,CAAsB,IAAtB,CAAD,EAA8B;AAChC,aAAO,IAAP,CADgC;KAAlC;GAFF;CADF;;AASA,SAAS,oBAAT,CAA8B,IAA9B,EAAoC,IAApC,EAA0C,KAA1C,EAAiD;AAC/C,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AACpC,QAAI,MAAM,KAAK,CAAL,CAAN,CADgC;AAEpC,QAAI,OAAO,IAAI,IAAJ,CAAP,KAAqB,WAArB,EAAkC;AACpC,aAAO,KAAK,SAAL,CAAe,IAAI,IAAJ,CAAf,CAAP,CADoC;KAAtC;GAFF;AAMA,MAAI,KAAJ,EAAW;AACT,WAAO,WAAP,CADS;GAAX;CAPF;;AAYA,OAAO,OAAP,GAAiB,OAAjB","file":"replace-compiled.js","sourcesContent":["'use strict';\n\nvar jsTokens = require('js-tokens');\n\nvar processEnvRe = /\\bprocess\\.env\\.[_$a-zA-Z][$\\w]+\\b/;\nvar spaceOrCommentRe = /^(?:\\s|\\/[/*])/;\n\nfunction replace(src, envs) {\n  if (!processEnvRe.test(src)) {\n    return src;\n  }\n\n  var out = '';\n  var purge = envs.some(function(env) {\n    return env._ && env._.indexOf('purge') !== -1;\n  });\n\n  jsTokens.lastIndex = 0\n  var parts = src.match(jsTokens);\n\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i    ] === 'process' &&\n        parts[i + 1] === '.' &&\n        parts[i + 2] === 'env' &&\n        parts[i + 3] === '.') {\n      var prevCodeToken = getAdjacentCodeToken(-1, parts, i);\n      var nextCodeToken = getAdjacentCodeToken(1, parts, i + 4);\n      var replacement = getReplacementString(envs, parts[i + 4], purge);\n      if (prevCodeToken !== '.' &&\n          nextCodeToken !== '.' &&\n          nextCodeToken !== '=' &&\n          typeof replacement === 'string') {\n        out += replacement;\n        i += 4;\n        continue;\n      }\n    }\n    out += parts[i];\n  }\n\n  return out;\n}\n\nfunction getAdjacentCodeToken(dir, parts, i) {\n  while (true) {\n    var part = parts[i += dir];\n    if (!spaceOrCommentRe.test(part)) {\n      return part;\n    }\n  }\n}\n\nfunction getReplacementString(envs, name, purge) {\n  for (var j = 0; j < envs.length; j++) {\n    var env = envs[j];\n    if (typeof env[name] !== 'undefined') {\n      return JSON.stringify(env[name]);\n    }\n  }\n  if (purge) {\n    return 'undefined';\n  }\n}\n\nmodule.exports = replace;\n"]}