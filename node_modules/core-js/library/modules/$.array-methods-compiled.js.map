{"version":3,"sources":["$.array-methods.js"],"names":[],"mappings":";;;;;;;;;AAOA,IAAI,MAAW,QAAQ,SAAR,CAAX;IACA,UAAW,QAAQ,aAAR,CAAX;IACA,WAAW,QAAQ,eAAR,CAAX;IACA,WAAW,QAAQ,eAAR,CAAX;IACA,MAAW,QAAQ,0BAAR,CAAX;AACJ,OAAO,OAAP,GAAiB,UAAS,IAAT,EAAc;AAC7B,MAAI,SAAgB,QAAQ,CAAR;MAChB,YAAgB,QAAQ,CAAR;MAChB,UAAgB,QAAQ,CAAR;MAChB,WAAgB,QAAQ,CAAR;MAChB,gBAAgB,QAAQ,CAAR;MAChB,WAAgB,QAAQ,CAAR,IAAa,aAAb,CANS;AAO7B,SAAO,UAAS,KAAT,EAAgB,UAAhB,EAA4B,IAA5B,EAAiC;AACtC,QAAI,IAAS,SAAS,KAAT,CAAT;QACA,OAAS,QAAQ,CAAR,CAAT;QACA,IAAS,IAAI,UAAJ,EAAgB,IAAhB,EAAsB,CAAtB,CAAT;QACA,SAAS,SAAS,KAAK,MAAL,CAAlB;QACA,QAAS,CAAT;QACA,SAAS,SAAS,IAAI,KAAJ,EAAW,MAAX,CAAT,GAA8B,YAAY,IAAI,KAAJ,EAAW,CAAX,CAAZ,GAA4B,SAA5B;QACvC,GANJ;QAMS,GANT,CADsC;AAQtC,WAAK,SAAS,KAAT,EAAgB,OAArB;AAA6B,UAAG,YAAY,SAAS,IAAT,EAAc;AACxD,cAAM,KAAK,KAAL,CAAN,CADwD;AAExD,cAAM,EAAE,GAAF,EAAO,KAAP,EAAc,CAAd,CAAN,CAFwD;AAGxD,YAAG,IAAH,EAAQ;AACN,cAAG,MAAH,EAAU,OAAO,KAAP,IAAgB,GAAhB;AAAV,eACK,IAAG,GAAH,EAAO,QAAO,IAAP;AACV,mBAAK,CAAL;AAAQ,uBAAO,IAAP,CAAR;AADU,mBAEL,CAAL;AAAQ,uBAAO,GAAP,CAAR;AAFU,mBAGL,CAAL;AAAQ,uBAAO,KAAP,CAAR;AAHU,mBAIL,CAAL;AAAQ,uBAAO,IAAP,CAAY,GAAZ,EAAR;AAJU,aAAP,MAKE,IAAG,QAAH,EAAY,OAAO,KAAP,CAAZ;AAPD,SAAR;OAH2B;KAA7B,OAaO,gBAAgB,CAAC,CAAD,GAAK,WAAW,QAAX,GAAsB,QAAtB,GAAiC,MAAjC,CArBU;GAAjC,CAPsB;CAAd","file":"$.array-methods-compiled.js","sourcesContent":["// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx      = require('./$.ctx')\n  , IObject  = require('./$.iobject')\n  , toObject = require('./$.to-object')\n  , toLength = require('./$.to-length')\n  , asc      = require('./$.array-species-create');\nmodule.exports = function(TYPE){\n  var IS_MAP        = TYPE == 1\n    , IS_FILTER     = TYPE == 2\n    , IS_SOME       = TYPE == 3\n    , IS_EVERY      = TYPE == 4\n    , IS_FIND_INDEX = TYPE == 6\n    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;\n  return function($this, callbackfn, that){\n    var O      = toObject($this)\n      , self   = IObject(O)\n      , f      = ctx(callbackfn, that, 3)\n      , length = toLength(self.length)\n      , index  = 0\n      , result = IS_MAP ? asc($this, length) : IS_FILTER ? asc($this, 0) : undefined\n      , val, res;\n    for(;length > index; index++)if(NO_HOLES || index in self){\n      val = self[index];\n      res = f(val, index, O);\n      if(TYPE){\n        if(IS_MAP)result[index] = res;            // map\n        else if(res)switch(TYPE){\n          case 3: return true;                    // some\n          case 5: return val;                     // find\n          case 6: return index;                   // findIndex\n          case 2: result.push(val);               // filter\n        } else if(IS_EVERY)return false;          // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};"]}