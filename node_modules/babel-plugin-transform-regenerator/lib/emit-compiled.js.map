{"version":3,"sources":["emit.js"],"names":[],"mappings":";;;;;;;;;;AAUA;;AAEA,IAAI,yBAAyB,QAAQ,+CAAR,EAAyD,SAAzD,CAAzB;;AAEJ,IAAI,0BAA0B,QAAQ,gDAAR,EAA0D,SAA1D,CAA1B;;AAEJ,IAAI,UAAU,QAAQ,QAAR,CAAV;;AAEJ,IAAI,WAAW,uBAAuB,OAAvB,CAAX;;AAEJ,IAAI,cAAc,QAAQ,aAAR,CAAd;;AAEJ,IAAI,IAAI,wBAAwB,WAAxB,CAAJ;;AAEJ,IAAI,QAAQ,QAAQ,QAAR,CAAR;;AAEJ,IAAI,OAAO,wBAAwB,KAAxB,CAAP;;AAEJ,IAAI,QAAQ,QAAQ,QAAR,CAAR;;AAEJ,IAAI,OAAO,wBAAwB,KAAxB,CAAP;;AAEJ,IAAI,QAAQ,QAAQ,QAAR,CAAR;;AAEJ,IAAI,OAAO,wBAAwB,KAAxB,CAAP;;AAEJ,IAAI,SAAS,OAAO,SAAP,CAAiB,cAAjB;;AAEb,SAAS,OAAT,CAAiB,SAAjB,EAA4B;AAC1B,WAAS,SAAT,EAAoB,EAApB,CAAuB,gBAAgB,OAAhB,CAAvB,CAD0B;AAE1B,IAAE,gBAAF,CAAmB,SAAnB;;;AAF0B,MAK1B,CAAK,UAAL,GAAkB,CAAlB;;;;;;AAL0B,MAW1B,CAAK,SAAL,GAAiB,SAAjB;;;;AAX0B,MAe1B,CAAK,OAAL,GAAe,EAAf;;;;AAf0B,MAmB1B,CAAK,MAAL,GAAc,CAAC,IAAD,CAAd;;;;AAnB0B,MAuB1B,CAAK,QAAL,GAAgB,KAAhB;;;AAvB0B,MA0B1B,CAAK,UAAL,GAAkB,EAAlB;;;;;AA1B0B,MA+B1B,CAAK,WAAL,GAAmB,IAAI,KAAK,WAAL,CAAiB,IAArB,CAAnB,CA/B0B;CAA5B;;AAkCA,IAAI,KAAK,QAAQ,SAAR;AACT,QAAQ,OAAR,GAAkB,OAAlB;;;;;;;AAOA,SAAS,GAAT,GAAe;AACb,SAAO,EAAE,cAAF,CAAiB,CAAC,CAAD,CAAxB,CADa;CAAf;;;;AAMA,GAAG,IAAH,GAAU,UAAU,GAAV,EAAe;AACvB,IAAE,aAAF,CAAgB,GAAhB,EADuB;AAEvB,MAAI,QAAQ,KAAK,OAAL,CAAa,MAAb,CAFW;AAGvB,MAAI,IAAI,KAAJ,KAAc,CAAC,CAAD,EAAI;AACpB,QAAI,KAAJ,GAAY,KAAZ,CADoB;GAAtB,MAEO;;;AAGL,aAAS,SAAT,EAAoB,WAApB,CAAgC,IAAI,KAAJ,EAAW,KAA3C,EAHK;GAFP;AAOA,OAAK,MAAL,CAAY,KAAZ,IAAqB,IAArB,CAVuB;AAWvB,SAAO,GAAP,CAXuB;CAAf;;AAcV,GAAG,IAAH,GAAU,UAAU,IAAV,EAAgB;AACxB,MAAI,EAAE,YAAF,CAAe,IAAf,CAAJ,EAA0B;AACxB,WAAO,EAAE,mBAAF,CAAsB,IAAtB,CAAP,CADwB;GAA1B;;AAIA,IAAE,eAAF,CAAkB,IAAlB,EALwB;AAMxB,OAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,EANwB;CAAhB;;;;AAWV,GAAG,UAAH,GAAgB,UAAU,GAAV,EAAe,GAAf,EAAoB;AAClC,OAAK,IAAL,CAAU,KAAK,MAAL,CAAY,GAAZ,EAAiB,GAAjB,CAAV,EADkC;AAElC,SAAO,GAAP,CAFkC;CAApB;;;AAMhB,GAAG,MAAH,GAAY,UAAU,GAAV,EAAe,GAAf,EAAoB;AAC9B,SAAO,EAAE,mBAAF,CAAsB,EAAE,oBAAF,CAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,CAAtB,CAAP,CAD8B;CAApB;;;;AAMZ,GAAG,eAAH,GAAqB,UAAU,IAAV,EAAgB,QAAhB,EAA0B;AAC7C,SAAO,EAAE,gBAAF,CAAmB,KAAK,SAAL,EAAgB,WAAW,EAAE,aAAF,CAAgB,IAAhB,CAAX,GAAmC,EAAE,UAAF,CAAa,IAAb,CAAnC,EAAuD,CAAC,CAAC,QAAD,CAAlG,CAD6C;CAA1B;;;AAKrB,GAAG,IAAH,GAAU,UAAU,IAAV,EAAgB;AACxB,MAAI,IAAJ,EAAU;AACR,SAAK,cAAL,CAAoB,IAApB,EADQ;GAAV;;AAIA,OAAK,IAAL,CAAU,KAAK,QAAL,CAAV,CALwB;CAAhB;;AAQV,GAAG,cAAH,GAAoB,UAAU,SAAV,EAAqB;AACvC,IAAE,gBAAF,CAAmB,UAAU,KAAV,CAAnB,CADuC;;AAGvC,OAAK,UAAL,CAAgB,KAAK,eAAL,CAAqB,MAArB,CAAhB,EAA8C,KAAK,iBAAL,CAAuB,SAAvB,CAA9C,EAHuC;CAArB;;AAMpB,GAAG,qBAAH,GAA2B,UAAU,MAAV,EAAkB,QAAlB,EAA4B;AACrD,IAAE,aAAF,CAAgB,MAAhB,EADqD;;AAGrD,MAAI,YAAY,EAAE,cAAF,CAAiB,KAAK,eAAL,CAAqB,OAArB,EAA8B,IAA9B,CAAjB,EAAsD,CAAC,MAAD,CAAtD,CAAZ,CAHiD;;AAKrD,MAAI,QAAJ,EAAc;AACZ,SAAK,UAAL,CAAgB,QAAhB,EAA0B,SAA1B,EADY;GAAd,MAEO;AACL,SAAK,IAAL,CAAU,SAAV,EADK;GAFP;CALyB;;;;AAc3B,GAAG,IAAH,GAAU,UAAU,KAAV,EAAiB;AACzB,OAAK,UAAL,CAAgB,KAAK,eAAL,CAAqB,MAArB,CAAhB,EAA8C,KAA9C,EADyB;AAEzB,OAAK,IAAL,CAAU,EAAE,cAAF,EAAV,EAFyB;CAAjB;;;AAMV,GAAG,MAAH,GAAY,UAAU,IAAV,EAAgB,KAAhB,EAAuB;AACjC,IAAE,gBAAF,CAAmB,IAAnB,EADiC;AAEjC,IAAE,aAAF,CAAgB,KAAhB,EAFiC;;AAIjC,OAAK,IAAL,CAAU,EAAE,WAAF,CAAc,IAAd,EAAoB,EAAE,cAAF,CAAiB,CAAC,KAAK,MAAL,CAAY,KAAK,eAAL,CAAqB,MAArB,CAAZ,EAA0C,KAA1C,CAAD,EAAmD,EAAE,cAAF,EAAnD,CAAjB,CAApB,CAAV,EAJiC;CAAvB;;;AAQZ,GAAG,SAAH,GAAe,UAAU,IAAV,EAAgB,KAAhB,EAAuB;AACpC,IAAE,gBAAF,CAAmB,IAAnB,EADoC;AAEpC,IAAE,aAAF,CAAgB,KAAhB,EAFoC;;AAIpC,MAAI,cAAc,SAAd,CAJgC;AAKpC,MAAI,EAAE,iBAAF,CAAoB,IAApB,KAA6B,KAAK,QAAL,KAAkB,GAAlB,EAAuB;;AAEtD,kBAAc,KAAK,QAAL,CAFwC;GAAxD,MAGO;AACL,kBAAc,EAAE,eAAF,CAAkB,GAAlB,EAAuB,IAAvB,CAAd,CADK;GAHP;;AAOA,OAAK,IAAL,CAAU,EAAE,WAAF,CAAc,WAAd,EAA2B,EAAE,cAAF,CAAiB,CAAC,KAAK,MAAL,CAAY,KAAK,eAAL,CAAqB,MAArB,CAAZ,EAA0C,KAA1C,CAAD,EAAmD,EAAE,cAAF,EAAnD,CAAjB,CAA3B,CAAV,EAZoC;CAAvB;;;;;;;AAoBf,GAAG,WAAH,GAAiB,YAAY;AAC3B,SAAO,KAAK,eAAL,CAAqB,MAAM,KAAK,UAAL,EAAN,CAA5B,CAD2B;CAAZ;;AAIjB,GAAG,kBAAH,GAAwB,UAAU,EAAV,EAAc;AACpC,SAAO,EAAE,kBAAF,CAAqB,MAAM,IAAN;AAC5B,GAAC,KAAK,SAAL,CADM,EACW,EAAE,cAAF,CAAiB,CAAC,KAAK,eAAL,EAAD,CAAjB,CADX,EACuD,KADvD;AAEP;AAFO,GAAP,CADoC;CAAd;;;;;;;;;;;;;AAkBxB,GAAG,eAAH,GAAqB,YAAY;AAC/B,MAAI,OAAO,IAAP,CAD2B;AAE/B,MAAI,QAAQ,EAAR,CAF2B;AAG/B,MAAI,UAAU,SAAV;;;;AAH2B,MAO3B,eAAe,KAAf,CAP2B;;AAS/B,OAAK,OAAL,CAAa,OAAb,CAAqB,UAAU,IAAV,EAAgB,CAAhB,EAAmB;AACtC,QAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,CAA3B,CAAJ,EAAmC;AACjC,YAAM,IAAN,CAAW,EAAE,UAAF,CAAa,EAAE,cAAF,CAAiB,CAAjB,CAAb,EAAkC,UAAU,EAAV,CAA7C,EADiC;AAEjC,qBAAe,KAAf,CAFiC;KAAnC;;AAKA,QAAI,CAAC,YAAD,EAAe;AACjB,cAAQ,IAAR,CAAa,IAAb,EADiB;AAEjB,UAAI,EAAE,qBAAF,CAAwB,IAAxB,CAAJ,EAAmC,eAAe,IAAf,CAAnC;KAFF;GANmB,CAArB;;;;AAT+B,MAuB/B,CAAK,QAAL,CAAc,KAAd,GAAsB,KAAK,OAAL,CAAa,MAAb,CAvBS;;AAyB/B,QAAM,IAAN,CAAW,EAAE,UAAF,CAAa,KAAK,QAAL,EAAe;;GAA5B,CAAX;;;;AAMA,IAAE,UAAF,CAAa,EAAE,aAAF,CAAgB,KAAhB,CAAb,EAAqC;;AAErC,IAAE,eAAF,CAAkB,EAAE,cAAF,CAAiB,KAAK,eAAL,CAAqB,MAArB,CAAjB,EAA+C,EAA/C,CAAlB,CAFqC,CAArC,CANA,EAzB+B;;AAmC/B,SAAO,EAAE,cAAF,CAAiB,EAAE,cAAF,CAAiB,CAAjB,CAAjB,EAAsC,EAAE,eAAF,CAAkB,EAAE,oBAAF,CAAuB,GAAvB,EAA4B,KAAK,eAAL,CAAqB,MAArB,CAA5B,EAA0D,KAAK,eAAL,CAAqB,MAArB,CAA1D,CAAlB,EAA2G,KAA3G,CAAtC,CAAP,CAnC+B;CAAZ;;AAsCrB,GAAG,cAAH,GAAoB,YAAY;AAC9B,MAAI,KAAK,UAAL,CAAgB,MAAhB,KAA2B,CAA3B,EAA8B;;;AAGhC,WAAO,IAAP,CAHgC;GAAlC;;AAMA,MAAI,eAAe,CAAf,CAP0B;;AAS9B,SAAO,EAAE,eAAF,CAAkB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,UAAU,QAAV,EAAoB;AAC/D,QAAI,eAAe,SAAS,QAAT,CAAkB,KAAlB,CAD4C;AAE/D,aAAS,SAAT,EAAoB,EAApB,CAAuB,gBAAgB,YAAhB,EAA8B,0BAArD,EAF+D;AAG/D,mBAAe,YAAf,CAH+D;;AAK/D,QAAI,KAAK,SAAS,UAAT,CALsD;AAM/D,QAAI,KAAK,SAAS,YAAT,CANsD;;AAQ/D,QAAI,OAAO,CAAC,SAAS,QAAT;;AAEZ,SAAK,GAAG,QAAH,GAAc,IAAnB,CAFI,CAR2D;;AAY/D,QAAI,EAAJ,EAAQ;AACN,WAAK,CAAL,IAAU,GAAG,QAAH,CADJ;AAEN,WAAK,CAAL,IAAU,GAAG,QAAH,CAFJ;KAAR;;AAKA,WAAO,EAAE,eAAF,CAAkB,IAAlB,CAAP,CAjB+D;GAApB,CAAtC,CAAP,CAT8B;CAAZ;;;;;;;;;AAqCpB,GAAG,OAAH,GAAa,UAAU,IAAV,EAAgB,YAAhB,EAA8B;AACzC,MAAI,OAAO,KAAK,IAAL,CAD8B;AAEzC,MAAI,OAAO,IAAP,CAFqC;;AAIzC,IAAE,UAAF,CAAa,IAAb,EAJyC;;AAMzC,MAAI,EAAE,aAAF,CAAgB,IAAhB,CAAJ,EAA2B,MAAM,aAAa,IAAb,CAAN,CAA3B;;AAEA,MAAI,EAAE,WAAF,CAAc,IAAd,CAAJ,EAAyB,OAAO,KAAK,gBAAL,CAAsB,IAAtB,CAAP,CAAzB;;AAEA,MAAI,EAAE,YAAF,CAAe,IAAf,CAAJ,EAA0B,OAAO,KAAK,iBAAL,CAAuB,IAAvB,EAA6B,YAA7B,CAAP,CAA1B;;AAEA,UAAQ,KAAK,IAAL;AACN,SAAK,SAAL;AACE,aAAO,KAAK,GAAL,CAAS,MAAT,EAAiB,GAAjB,CAAqB,KAAK,gBAAL,EAAuB,IAA5C,CAAP,CADF;;AADF,SAIO,oBAAL;AACE,YAAM,aAAa,IAAb,CAAN,CADF;;;;AAJF,SASO,UAAL,CATF;AAUE,SAAK,YAAL,CAVF;AAWE,SAAK,aAAL;AACE,YAAM,IAAI,KAAJ,CAAU,KAAK,IAAL,GAAY,2CAAZ,CAAhB,CADF;;AAXF;AAeI,YAAM,IAAI,KAAJ,CAAU,0BAA0B,KAAK,SAAL,CAAe,KAAK,IAAL,CAAzC,CAAhB,CADF;AAdF,GAZyC;CAA9B;;AA+Bb,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AAC1B,SAAO,IAAI,KAAJ,CAAU,wDAAwD,kDAAxD,GAA6G,KAAK,SAAL,CAAe,IAAf,CAA7G,CAAjB,CAD0B;CAA5B;;AAIA,GAAG,gBAAH,GAAsB,UAAU,IAAV,EAAgB,OAAhB,EAAyB;AAC7C,MAAI,OAAO,KAAK,IAAL,CADkC;AAE7C,MAAI,OAAO,IAAP,CAFyC;AAG7C,MAAI,SAAS,SAAT;MACA,QAAQ,SAAR;MACA,OAAO,SAAP,CALyC;;AAO7C,IAAE,eAAF,CAAkB,IAAlB,EAP6C;;AAS7C,MAAI,OAAJ,EAAa;AACX,MAAE,gBAAF,CAAmB,OAAnB,EADW;GAAb,MAEO;AACL,cAAU,IAAV,CADK;GAFP;;;;AAT6C,MAiBzC,EAAE,gBAAF,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,SAAK,GAAL,CAAS,MAAT,EAAiB,OAAjB,CAAyB,UAAU,IAAV,EAAgB;AACvC,WAAK,gBAAL,CAAsB,IAAtB,EADuC;KAAhB,CAAzB,CAD4B;AAI5B,WAJ4B;GAA9B;;AAOA,MAAI,CAAC,KAAK,YAAL,CAAkB,IAAlB,CAAD,EAA0B;;;;;;AAM5B,SAAK,IAAL,CAAU,IAAV,EAN4B;AAO5B,WAP4B;GAA9B;;AAUA,UAAQ,KAAK,IAAL;AACN,SAAK,qBAAL;AACE,WAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,YAAT,CAAvB,EAA+C,IAA/C,EADF;AAEE,YAFF;;AADF,SAKO,kBAAL;AACE,cAAQ,KAAR;;;;;;;;;;;;;;;;;;;;;;AADF,UAuBE,CAAK,WAAL,CAAiB,SAAjB,CAA2B,IAAI,KAAK,YAAL,CAAkB,KAAtB,EAA6B,KAAK,KAAL,CAAxD,EAAqE,YAAY;AAC/E,aAAK,gBAAL,CAAsB,KAAK,GAAL,CAAS,MAAT,CAAtB,EAAwC,KAAK,KAAL,CAAxC,CAD+E;OAAZ,CAArE,CAvBF;;AA2BE,WAAK,IAAL,CAAU,KAAV,EA3BF;;AA6BE,YA7BF;;AALF,SAoCO,gBAAL;AACE,eAAS,KAAT,CADF;AAEE,cAAQ,KAAR,CAFF;;AAIE,WAAK,IAAL,CAAU,MAAV,EAJF;AAKE,WAAK,SAAL,CAAe,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,MAAT,CAAvB,CAAf,EAAyD,KAAzD,EALF;AAME,WAAK,WAAL,CAAiB,SAAjB,CAA2B,IAAI,KAAK,SAAL,CAAe,KAAnB,EAA0B,MAA1B,EAAkC,OAAlC,CAA3B,EAAuE,YAAY;AACjF,aAAK,gBAAL,CAAsB,KAAK,GAAL,CAAS,MAAT,CAAtB,EADiF;OAAZ,CAAvE,CANF;AASE,WAAK,IAAL,CAAU,MAAV,EATF;AAUE,WAAK,IAAL,CAAU,KAAV,EAVF;;AAYE,YAZF;;AApCF,SAkDO,kBAAL;AACE,UAAI,QAAQ,KAAR,CADN;AAEE,UAAI,OAAO,KAAP,CAFN;AAGE,cAAQ,KAAR,CAHF;;AAKE,WAAK,IAAL,CAAU,KAAV,EALF;AAME,WAAK,WAAL,CAAiB,SAAjB,CAA2B,IAAI,KAAK,SAAL,CAAe,KAAnB,EAA0B,IAA1B,EAAgC,OAAhC,CAA3B,EAAqE,YAAY;AAC/E,aAAK,OAAL,CAAa,KAAK,GAAL,CAAS,MAAT,CAAb,EAD+E;OAAZ,CAArE,CANF;AASE,WAAK,IAAL,CAAU,IAAV,EATF;AAUE,WAAK,MAAL,CAAY,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,MAAT,CAAvB,CAAZ,EAAsD,KAAtD,EAVF;AAWE,WAAK,IAAL,CAAU,KAAV,EAXF;;AAaE,YAbF;;AAlDF,SAiEO,cAAL;AACE,aAAO,KAAP,CADF;AAEE,UAAI,SAAS,KAAT,CAFN;AAGE,cAAQ,KAAR,CAHF;;AAKE,UAAI,KAAK,IAAL,EAAW;;;AAGb,aAAK,OAAL,CAAa,KAAK,GAAL,CAAS,MAAT,CAAb,EAA+B,IAA/B,EAHa;OAAf;;AAMA,WAAK,IAAL,CAAU,IAAV,EAXF;;AAaE,UAAI,KAAK,IAAL,EAAW;AACb,aAAK,SAAL,CAAe,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,MAAT,CAAvB,CAAf,EAAyD,KAAzD,EADa;OAAf,MAEO;;OAFP;;AAMA,WAAK,WAAL,CAAiB,SAAjB,CAA2B,IAAI,KAAK,SAAL,CAAe,KAAnB,EAA0B,MAA1B,EAAkC,OAAlC,CAA3B,EAAuE,YAAY;AACjF,aAAK,gBAAL,CAAsB,KAAK,GAAL,CAAS,MAAT,CAAtB,EADiF;OAAZ,CAAvE,CAnBF;;AAuBE,WAAK,IAAL,CAAU,MAAV,EAvBF;;AAyBE,UAAI,KAAK,MAAL,EAAa;;;AAGf,aAAK,OAAL,CAAa,KAAK,GAAL,CAAS,QAAT,CAAb,EAAiC,IAAjC,EAHe;OAAjB;;AAMA,WAAK,IAAL,CAAU,IAAV,EA/BF;;AAiCE,WAAK,IAAL,CAAU,KAAV,EAjCF;;AAmCE,YAnCF;;AAjEF,SAsGO,oBAAL;AACE,aAAO,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,YAAT,CAAvB,CAAP,CADF;;AAtGF,SAyGO,gBAAL;AACE,aAAO,KAAP,CADF;AAEE,cAAQ,KAAR,CAFF;;AAIE,UAAI,gBAAgB,KAAK,WAAL,EAAhB,CAJN;AAKE,WAAK,UAAL,CAAgB,aAAhB,EAA+B,EAAE,cAAF,CAAiB,KAAK,eAAL,CAAqB,MAArB,CAAjB,EAA+C,CAAC,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,OAAT,CAAvB,CAAD,CAA/C,CAA/B,EALF;;AAOE,WAAK,IAAL,CAAU,IAAV,EAPF;;AASE,UAAI,gBAAgB,KAAK,WAAL,EAAhB,CATN;AAUE,WAAK,MAAL,CAAY,EAAE,gBAAF,CAAmB,EAAE,oBAAF,CAAuB,GAAvB,EAA4B,aAA5B,EAA2C,EAAE,cAAF,CAAiB,aAAjB,EAAgC,EAAhC,CAA3C,CAAnB,EAAoG,EAAE,UAAF,CAAa,MAAb,CAApG,EAA0H,KAA1H,CAAZ,EAA8I,KAA9I,EAVF;;AAYE,WAAK,UAAL,CAAgB,KAAK,IAAL,EAAW,EAAE,gBAAF,CAAmB,aAAnB,EAAkC,EAAE,UAAF,CAAa,OAAb,CAAlC,EAAyD,KAAzD,CAA3B,EAZF;;AAcE,WAAK,WAAL,CAAiB,SAAjB,CAA2B,IAAI,KAAK,SAAL,CAAe,KAAnB,EAA0B,IAA1B,EAAgC,OAAhC,CAA3B,EAAqE,YAAY;AAC/E,aAAK,gBAAL,CAAsB,KAAK,GAAL,CAAS,MAAT,CAAtB,EAD+E;OAAZ,CAArE,CAdF;;AAkBE,WAAK,IAAL,CAAU,IAAV,EAlBF;;AAoBE,WAAK,IAAL,CAAU,KAAV,EApBF;;AAsBE,YAtBF;;AAzGF,SAiIO,gBAAL;AACE,WAAK,oBAAL,CAA0B;AACxB,cAAM,OAAN;AACA,gBAAQ,KAAK,WAAL,CAAiB,WAAjB,CAA6B,KAAK,KAAL,CAArC;OAFF,EADF;;AAME,YANF;;AAjIF,SAyIO,mBAAL;AACE,WAAK,oBAAL,CAA0B;AACxB,cAAM,UAAN;AACA,gBAAQ,KAAK,WAAL,CAAiB,cAAjB,CAAgC,KAAK,KAAL,CAAxC;OAFF,EADF;;AAME,YANF;;AAzIF,SAiJO,iBAAL;;;AAGE,UAAI,OAAO,KAAK,UAAL,CAAgB,KAAK,WAAL,EAAhB,EAAoC,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,cAAT,CAAvB,CAApC,CAAP,CAHN;;AAKE,cAAQ,KAAR,CALF;AAME,UAAI,aAAa,KAAb,CANN;AAOE,UAAI,YAAY,UAAZ,CAPN;AAQE,UAAI,WAAW,EAAX;;;AARN,UAWM,QAAQ,KAAK,KAAL,IAAc,EAAd,CAXd;;AAaE,WAAK,IAAI,IAAI,MAAM,MAAN,GAAe,CAAf,EAAkB,KAAK,CAAL,EAAQ,EAAE,CAAF,EAAK;AAC1C,YAAI,IAAI,MAAM,CAAN,CAAJ,CADsC;AAE1C,UAAE,gBAAF,CAAmB,CAAnB,EAF0C;;AAI1C,YAAI,EAAE,IAAF,EAAQ;AACV,sBAAY,EAAE,qBAAF,CAAwB,EAAE,gBAAF,CAAmB,KAAnB,EAA0B,IAA1B,EAAgC,EAAE,IAAF,CAAxD,EAAiE,SAAS,CAAT,IAAc,KAAd,EAAqB,SAAtF,CAAZ,CADU;SAAZ,MAEO;AACL,mBAAS,CAAT,IAAc,UAAd,CADK;SAFP;OAJF;;AAWA,UAAI,eAAe,KAAK,GAAL,CAAS,cAAT,CAAf,CAxBN;AAyBE,mBAAa,WAAb,CAAyB,SAAzB,EAzBF;AA0BE,WAAK,IAAL,CAAU,KAAK,iBAAL,CAAuB,YAAvB,CAAV,EA1BF;;AA4BE,WAAK,WAAL,CAAiB,SAAjB,CAA2B,IAAI,KAAK,WAAL,CAAiB,KAArB,CAA3B,EAAwD,YAAY;AAClE,aAAK,GAAL,CAAS,OAAT,EAAkB,OAAlB,CAA0B,UAAU,QAAV,EAAoB;AAC5C,cAAI,IAAI,SAAS,GAAT,CADoC;AAE5C,eAAK,IAAL,CAAU,SAAS,CAAT,CAAV,EAF4C;;AAI5C,mBAAS,GAAT,CAAa,YAAb,EAA2B,OAA3B,CAAmC,UAAU,IAAV,EAAgB;AACjD,iBAAK,gBAAL,CAAsB,IAAtB,EADiD;WAAhB,CAAnC,CAJ4C;SAApB,CAA1B,CADkE;OAAZ,CAAxD,CA5BF;;AAuCE,WAAK,IAAL,CAAU,KAAV,EAvCF;AAwCE,UAAI,WAAW,KAAX,KAAqB,CAAC,CAAD,EAAI;AAC3B,aAAK,IAAL,CAAU,UAAV,EAD2B;AAE3B,iBAAS,SAAT,EAAoB,WAApB,CAAgC,MAAM,KAAN,EAAa,WAAW,KAAX,CAA7C,CAF2B;OAA7B;;AAKA,YA7CF;;AAjJF,SAgMO,aAAL;AACE,UAAI,UAAU,KAAK,SAAL,IAAkB,KAAlB,CADhB;AAEE,cAAQ,KAAR,CAFF;;AAIE,WAAK,SAAL,CAAe,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,MAAT,CAAvB,CAAf,EAAyD,WAAW,KAAX,CAAzD,CAJF;;AAME,WAAK,gBAAL,CAAsB,KAAK,GAAL,CAAS,YAAT,CAAtB,EANF;;AAQE,UAAI,OAAJ,EAAa;AACX,aAAK,IAAL,CAAU,KAAV,EADW;AAEX,aAAK,IAAL,CAAU,OAAV,EAFW;AAGX,aAAK,gBAAL,CAAsB,KAAK,GAAL,CAAS,WAAT,CAAtB,EAHW;OAAb;;AAMA,WAAK,IAAL,CAAU,KAAV,EAdF;;AAgBE,YAhBF;;AAhMF,SAkNO,iBAAL;AACE,WAAK,oBAAL,CAA0B;AACxB,cAAM,QAAN;AACA,eAAO,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,UAAT,CAAvB,CAAP;OAFF,EADF;;AAME,YANF;;AAlNF,SA0NO,eAAL;AACE,YAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN,CADF;;AA1NF,SA6NO,cAAL;AACE,cAAQ,KAAR,CADF;;AAGE,UAAI,UAAU,KAAK,OAAL,CAHhB;;AAKE,UAAI,WAAW,WAAW,KAAX,CALjB;AAME,UAAI,aAAa,YAAY,IAAI,KAAK,UAAL,CAAgB,QAApB,EAA8B,QAAQ,KAAR,CAA1C,CANnB;;AAQE,UAAI,aAAa,KAAK,SAAL,IAAkB,KAAlB,CARnB;AASE,UAAI,eAAe,cAAc,IAAI,KAAK,YAAL,CAAkB,UAAtB,EAAkC,KAAlC,CAAd,CATrB;;AAWE,UAAI,WAAW,IAAI,KAAK,QAAL,CAAc,KAAK,qBAAL,EAAlB,EAAgD,UAAhD,EAA4D,YAA5D,CAAX,CAXN;;AAaE,WAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB,EAbF;AAcE,WAAK,oBAAL,CAA0B,SAAS,QAAT,CAA1B,CAdF;;AAgBE,WAAK,WAAL,CAAiB,SAAjB,CAA2B,QAA3B,EAAqC,YAAY;AAC/C,aAAK,gBAAL,CAAsB,KAAK,GAAL,CAAS,OAAT,CAAtB,EAD+C;;AAG/C,YAAI,QAAJ,EAAc;AACZ,WAAC,YAAY;AACX,gBAAI,UAAJ,EAAgB;;;;AAId,mBAAK,IAAL,CAAU,UAAV,EAJc;aAAhB,MAKO;;;AAGL,mBAAK,IAAL,CAAU,KAAV,EAHK;aALP;;AAWA,iBAAK,oBAAL,CAA0B,KAAK,IAAL,CAAU,QAAV,CAA1B,EAZW;;AAcX,gBAAI,WAAW,KAAK,GAAL,CAAS,cAAT,CAAX,CAdO;AAeX,gBAAI,YAAY,KAAK,WAAL,EAAZ,CAfO;AAgBX,iBAAK,qBAAL,CAA2B,SAAS,QAAT,EAAmB,SAA9C,EAhBW;;AAkBX,qBAAS,QAAT,CAAkB,iBAAlB,EAAqC;AACnC,yBAAW,SAAX;AACA,8BAAgB,QAAQ,KAAR,CAAc,IAAd;aAFlB,EAlBW;;AAuBX,iBAAK,WAAL,CAAiB,SAAjB,CAA2B,UAA3B,EAAuC,YAAY;AACjD,mBAAK,gBAAL,CAAsB,QAAtB,EADiD;aAAZ,CAAvC,CAvBW;WAAZ,CAAD,GADY;SAAd;;AA8BA,YAAI,UAAJ,EAAgB;AACd,eAAK,oBAAL,CAA0B,KAAK,IAAL,CAAU,UAAV,CAA1B,EADc;;AAGd,eAAK,WAAL,CAAiB,SAAjB,CAA2B,YAA3B,EAAyC,YAAY;AACnD,iBAAK,gBAAL,CAAsB,KAAK,GAAL,CAAS,WAAT,CAAtB,EADmD;WAAZ,CAAzC,CAHc;;AAOd,eAAK,IAAL,CAAU,EAAE,eAAF,CAAkB,EAAE,cAAF,CAAiB,KAAK,eAAL,CAAqB,QAArB,CAAjB,EAAiD,CAAC,aAAa,QAAb,CAAlD,CAAlB,CAAV,EAPc;SAAhB;OAjCmC,CAArC,CAhBF;;AA4DE,WAAK,IAAL,CAAU,KAAV,EA5DF;;AA8DE,YA9DF;;AA7NF,SA6RO,gBAAL;AACE,WAAK,IAAL,CAAU,EAAE,cAAF,CAAiB,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,UAAT,CAAvB,CAAjB,CAAV,EADF;;AAGE,YAHF;;AA7RF;AAmSI,YAAM,IAAI,KAAJ,CAAU,+BAA+B,KAAK,SAAL,CAAe,KAAK,IAAL,CAA9C,CAAhB,CADF;AAlSF,GAlC6C;CAAzB;;AAyUtB,IAAI,oBAAoB;AACtB,cAAY,SAAS,UAAT,CAAoB,IAApB,EAA0B,KAA1B,EAAiC;AAC3C,QAAI,KAAK,IAAL,CAAU,IAAV,KAAmB,MAAM,cAAN,IAAwB,KAAK,WAAL,CAAiB,IAAjB,CAA3C,EAAmE;AACrE,WAAK,WAAL,CAAiB,MAAM,SAAN,CAAjB,CADqE;KAAvE;GADU;;AAMZ,SAAO,SAAS,KAAT,CAAe,IAAf,EAAqB,KAArB,EAA4B;AACjC,QAAI,KAAK,KAAL,CAAW,aAAX,CAAyB,MAAM,cAAN,CAA7B,EAAoD;;;AAGlD,WAAK,IAAL,GAHkD;KAApD;GADK;CAPL;;AAgBJ,GAAG,oBAAH,GAA0B,UAAU,MAAV,EAAkB;AAC1C,MAAI,CAAC,kBAAkB,MAAlB,CAAD,EAA4B;AAC9B,aAAS,SAAT,EAAoB,EAApB,CAAuB,KAAvB,EAA8B,gCAAgC,KAAK,SAAL,CAAe,MAAf,CAAhC,CAA9B,CAD8B;GAAhC;;AAIA,WAAS,SAAT,EAAoB,cAApB,CAAmC,OAAO,IAAP,EAAa,QAAhD,EAA0D,mCAA1D,EAL0C;;AAO1C,MAAI,aAAa,CAAC,EAAE,aAAF,CAAgB,OAAO,IAAP,CAAjB,CAAb,CAPsC;;AAS1C,MAAI,OAAO,IAAP,KAAgB,OAAhB,IAA2B,OAAO,IAAP,KAAgB,UAAhB,EAA4B;AACzD,MAAE,aAAF,CAAgB,OAAO,MAAP,CAAhB,CADyD;AAEzD,eAAW,CAAX,IAAgB,OAAO,MAAP,CAFyC;GAA3D,MAGO,IAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,OAAO,IAAP,KAAgB,OAAhB,EAAyB;AAC9D,QAAI,OAAO,KAAP,EAAc;AAChB,QAAE,gBAAF,CAAmB,OAAO,KAAP,CAAnB,CADgB;AAEhB,iBAAW,CAAX,IAAgB,OAAO,KAAP,CAFA;KAAlB;GADK;;AAOP,OAAK,IAAL,CAAU,EAAE,eAAF,CAAkB,EAAE,cAAF,CAAiB,KAAK,eAAL,CAAqB,QAArB,CAAjB,EAAiD,UAAjD,CAAlB,CAAV,EAnB0C;CAAlB;;AAsB1B,SAAS,iBAAT,CAA2B,MAA3B,EAAmC;AACjC,MAAI,OAAO,OAAO,IAAP,CADsB;;AAGjC,MAAI,SAAS,QAAT,EAAmB;AACrB,WAAO,CAAC,OAAO,IAAP,CAAY,MAAZ,EAAoB,QAApB,CAAD,CADc;GAAvB;;AAIA,MAAI,SAAS,OAAT,IAAoB,SAAS,UAAT,EAAqB;AAC3C,WAAO,CAAC,OAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAAD,IAAiC,EAAE,SAAF,CAAY,OAAO,MAAP,CAA7C,CADoC;GAA7C;;AAIA,MAAI,SAAS,QAAT,IAAqB,SAAS,OAAT,EAAkB;AACzC,WAAO,OAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,KAAgC,CAAC,OAAO,IAAP,CAAY,MAAZ,EAAoB,QAApB,CAAD,CADE;GAA3C;;AAIA,SAAO,KAAP,CAfiC;CAAnC;;;;;;;;;;;AA2BA,GAAG,qBAAH,GAA2B,YAAY;AACrC,SAAO,EAAE,cAAF,CAAiB,KAAK,OAAL,CAAa,MAAb,CAAxB,CADqC;CAAZ;;;;;;;;;;;;AAc3B,GAAG,oBAAH,GAA0B,UAAU,GAAV,EAAe;AACvC,MAAI,GAAJ,EAAS;AACP,MAAE,aAAF,CAAgB,GAAhB,EADO;;AAGP,QAAI,IAAI,KAAJ,KAAc,CAAC,CAAD,EAAI;;;AAGpB,UAAI,KAAJ,GAAY,KAAK,OAAL,CAAa,MAAb,CAHQ;KAAtB,MAIO;;AAEL,eAAS,SAAT,EAAoB,WAApB,CAAgC,IAAI,KAAJ,EAAW,KAAK,OAAL,CAAa,MAAb,CAA3C,CAFK;KAJP;GAHF,MAWO;AACL,UAAM,KAAK,qBAAL,EAAN,CADK;GAXP;;;;;AADuC,MAmBvC,CAAK,UAAL,CAAgB,KAAK,eAAL,CAAqB,MAArB,CAAhB,EAA8C,GAA9C,EAnBuC;CAAf;;AAsB1B,GAAG,iBAAH,GAAuB,UAAU,IAAV,EAAgB,YAAhB,EAA8B;AACnD,MAAI,OAAO,KAAK,IAAL,CADwC;AAEnD,MAAI,IAAJ,EAAU;AACR,MAAE,gBAAF,CAAmB,IAAnB,EADQ;GAAV,MAEO;AACL,WAAO,IAAP,CADK;GAFP;;AAMA,MAAI,OAAO,IAAP,CAR+C;AASnD,MAAI,SAAS,SAAT;AAT+C,MAU/C,QAAQ,SAAR,CAV+C;;AAYnD,WAAS,MAAT,CAAgB,IAAhB,EAAsB;AACpB,MAAE,gBAAF,CAAmB,IAAnB,EADoB;AAEpB,QAAI,YAAJ,EAAkB;AAChB,WAAK,IAAL,CAAU,IAAV,EADgB;KAAlB,MAEO;AACL,aAAO,IAAP,CADK;KAFP;GAFF;;;;AAZmD,MAuB/C,CAAC,KAAK,YAAL,CAAkB,IAAlB,CAAD,EAA0B;AAC5B,WAAO,OAAO,IAAP,CAAP,CAD4B;GAA9B;;;;;;AAvBmD,MA+B/C,qBAAqB,KAAK,YAAL,CAAkB,YAAlB,CAA+B,IAA/B,CAArB;;;;;;;;;;;AA/B+C,WA0C1C,iBAAT,CAA2B,OAA3B,EAAoC,SAApC,EAA+C,iBAA/C,EAAkE;AAChE,aAAS,SAAT,EAAoB,EAApB,CAAuB,CAAC,iBAAD,IAAsB,CAAC,OAAD,EAAU,iEAAiE,sCAAjE,CAAvD,CADgE;;AAGhE,QAAI,SAAS,KAAK,iBAAL,CAAuB,SAAvB,EAAkC,iBAAlC,CAAT,CAH4D;;AAKhE,QAAI,iBAAJ,EAAuB;;;KAAvB,MAGO,IAAI,WAAW,sBAAsB,CAAC,EAAE,SAAF,CAAY,MAAZ,CAAD,EAAsB;;;;;;;;;;;;AAY9D,iBAAS,KAAK,UAAL,CAAgB,WAAW,KAAK,WAAL,EAAX,EAA+B,MAA/C,CAAT,CAZ8D;OAA3D;AAcP,WAAO,MAAP,CAtBgE;GAAlE;;;;;;AA1CmD,UAuE3C,KAAK,IAAL;AACN,SAAK,kBAAL;AACE,aAAO,OAAO,EAAE,gBAAF,CAAmB,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,QAAT,CAAvB,CAAnB,EAA+D,KAAK,QAAL,GAAgB,kBAAkB,IAAlB,EAAwB,KAAK,GAAL,CAAS,UAAT,CAAxB,CAAhB,GAAgE,KAAK,QAAL,EAAe,KAAK,QAAL,CAArJ,CAAP,CADF;;AADF,SAIO,gBAAL;AACE,UAAI,aAAa,KAAK,GAAL,CAAS,QAAT,CAAb,CADN;AAEE,UAAI,WAAW,KAAK,GAAL,CAAS,WAAT,CAAX,CAFN;;AAIE,UAAI,YAAY,SAAZ,CAJN;AAKE,UAAI,UAAU,EAAV,CALN;;AAOE,UAAI,iBAAiB,KAAjB,CAPN;AAQE,eAAS,OAAT,CAAiB,UAAU,OAAV,EAAmB;AAClC,yBAAiB,kBAAkB,KAAK,YAAL,CAAkB,QAAQ,IAAR,CAApC,CADiB;OAAnB,CAAjB,CARF;;AAYE,UAAI,EAAE,kBAAF,CAAqB,WAAW,IAAX,CAAzB,EAA2C;AACzC,YAAI,cAAJ,EAAoB;;;;;;;AAOlB,cAAI,YAAY;;;AAGhB,eAAK,WAAL,EAHgB,EAGI,WAAW,GAAX,CAAe,QAAf,CAHJ,CAAZ,CAPc;;AAYlB,cAAI,cAAc,WAAW,IAAX,CAAgB,QAAhB,GAA2B,kBAAkB,IAAlB,EAAwB,WAAW,GAAX,CAAe,UAAf,CAAxB,CAA3B,GAAiF,WAAW,IAAX,CAAgB,QAAhB,CAZjF;;AAclB,kBAAQ,OAAR,CAAgB,SAAhB,EAdkB;;AAgBlB,sBAAY,EAAE,gBAAF,CAAmB,EAAE,gBAAF,CAAmB,SAAnB,EAA8B,WAA9B,EAA2C,WAAW,IAAX,CAAgB,QAAhB,CAA9D,EAAyF,EAAE,UAAF,CAAa,MAAb,CAAzF,EAA+G,KAA/G,CAAZ,CAhBkB;SAApB,MAiBO;AACL,sBAAY,KAAK,iBAAL,CAAuB,UAAvB,CAAZ,CADK;SAjBP;OADF,MAqBO;AACL,oBAAY,KAAK,iBAAL,CAAuB,UAAvB,CAAZ,CADK;;AAGL,YAAI,EAAE,kBAAF,CAAqB,SAArB,CAAJ,EAAqC;;;;;;;;;AASnC,sBAAY,EAAE,kBAAF,CAAqB,CAAC,EAAE,cAAF,CAAiB,CAAjB,CAAD,EAAsB,SAAtB,CAArB,CAAZ,CATmC;SAArC;OAxBF;;AAqCA,eAAS,OAAT,CAAiB,UAAU,OAAV,EAAmB;AAClC,gBAAQ,IAAR,CAAa,kBAAkB,IAAlB,EAAwB,OAAxB,CAAb,EADkC;OAAnB,CAAjB,CAjDF;;AAqDE,aAAO,OAAO,EAAE,cAAF,CAAiB,SAAjB,EAA4B,OAA5B,CAAP,CAAP,CArDF;;AAJF,SA2DO,eAAL;AACE,aAAO,OAAO,EAAE,aAAF,CAAgB,kBAAkB,IAAlB,EAAwB,KAAK,GAAL,CAAS,QAAT,CAAxB,CAAhB,EAA6D,KAAK,GAAL,CAAS,WAAT,EAAsB,GAAtB,CAA0B,UAAU,OAAV,EAAmB;AACtH,eAAO,kBAAkB,IAAlB,EAAwB,OAAxB,CAAP,CADsH;OAAnB,CAAvF,CAAP,CAAP,CADF;;AA3DF,SAgEO,kBAAL;AACE,aAAO,OAAO,EAAE,gBAAF,CAAmB,KAAK,GAAL,CAAS,YAAT,EAAuB,GAAvB,CAA2B,UAAU,QAAV,EAAoB;AAC9E,YAAI,SAAS,gBAAT,EAAJ,EAAiC;AAC/B,iBAAO,EAAE,cAAF,CAAiB,SAAS,IAAT,CAAc,GAAd,EAAmB,kBAAkB,IAAlB,EAAwB,SAAS,GAAT,CAAa,OAAb,CAAxB,CAApC,EAAoF,SAAS,IAAT,CAAc,QAAd,CAA3F,CAD+B;SAAjC,MAEO;AACL,iBAAO,SAAS,IAAT,CADF;SAFP;OAD0D,CAA9C,CAAP,CAAP,CADF;;AAhEF,SAyEO,iBAAL;AACE,aAAO,OAAO,EAAE,eAAF,CAAkB,KAAK,GAAL,CAAS,UAAT,EAAqB,GAArB,CAAyB,UAAU,QAAV,EAAoB;AAC3E,eAAO,kBAAkB,IAAlB,EAAwB,QAAxB,CAAP,CAD2E;OAApB,CAA3C,CAAP,CAAP,CADF;;AAzEF,SA8EO,oBAAL;AACE,UAAI,YAAY,KAAK,WAAL,CAAiB,MAAjB,GAA0B,CAA1B,CADlB;;AAGE,WAAK,GAAL,CAAS,aAAT,EAAwB,OAAxB,CAAgC,UAAU,QAAV,EAAoB;AAClD,YAAI,SAAS,GAAT,KAAiB,SAAjB,EAA4B;AAC9B,mBAAS,KAAK,iBAAL,CAAuB,QAAvB,EAAiC,YAAjC,CAAT,CAD8B;SAAhC,MAEO;AACL,eAAK,iBAAL,CAAuB,QAAvB,EAAiC,IAAjC,EADK;SAFP;OAD8B,CAAhC,CAHF;;AAWE,aAAO,MAAP,CAXF;;AA9EF,SA2FO,mBAAL;AACE,cAAQ,KAAR,CADF;;AAGE,UAAI,CAAC,YAAD,EAAe;AACjB,iBAAS,KAAK,WAAL,EAAT,CADiB;OAAnB;;AAIA,UAAI,OAAO,kBAAkB,MAAlB,EAA0B,KAAK,GAAL,CAAS,MAAT,CAA1B,CAAP,CAPN;;AASE,UAAI,KAAK,QAAL,KAAkB,IAAlB,EAAwB;AAC1B,aAAK,SAAL,CAAe,IAAf,EAAqB,KAArB,EAD0B;OAA5B,MAEO;AACL,iBAAS,SAAT,EAAoB,WAApB,CAAgC,KAAK,QAAL,EAAe,IAA/C,EADK;AAEL,aAAK,MAAL,CAAY,IAAZ,EAAkB,KAAlB,EAFK;OAFP;;AAOA,wBAAkB,MAAlB,EAA0B,KAAK,GAAL,CAAS,OAAT,CAA1B,EAA6C,YAA7C,EAhBF;;AAkBE,WAAK,IAAL,CAAU,KAAV,EAlBF;;AAoBE,aAAO,MAAP,CApBF;;AA3FF,SAiHO,uBAAL;AACE,UAAI,UAAU,KAAV,CADN;AAEE,cAAQ,KAAR,CAFF;AAGE,UAAI,OAAO,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,MAAT,CAAvB,CAAP,CAHN;;AAKE,WAAK,SAAL,CAAe,IAAf,EAAqB,OAArB,EALF;;AAOE,UAAI,CAAC,YAAD,EAAe;AACjB,iBAAS,KAAK,WAAL,EAAT,CADiB;OAAnB;;AAIA,wBAAkB,MAAlB,EAA0B,KAAK,GAAL,CAAS,YAAT,CAA1B,EAAkD,YAAlD,EAXF;AAYE,WAAK,IAAL,CAAU,KAAV,EAZF;;AAcE,WAAK,IAAL,CAAU,OAAV,EAdF;AAeE,wBAAkB,MAAlB,EAA0B,KAAK,GAAL,CAAS,WAAT,CAA1B,EAAiD,YAAjD,EAfF;;AAiBE,WAAK,IAAL,CAAU,KAAV,EAjBF;;AAmBE,aAAO,MAAP,CAnBF;;AAjHF,SAsIO,iBAAL;AACE,aAAO,OAAO,EAAE,eAAF,CAAkB,KAAK,QAAL;;;AAGhC,WAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,UAAT,CAAvB,CAHc,EAGgC,CAAC,CAAC,KAAK,MAAL,CAHzC,CAAP,CADF;;AAtIF,SA4IO,kBAAL;AACE,aAAO,OAAO,EAAE,gBAAF,CAAmB,KAAK,QAAL,EAAe,kBAAkB,IAAlB,EAAwB,KAAK,GAAL,CAAS,MAAT,CAAxB,CAAlC,EAA6E,kBAAkB,IAAlB,EAAwB,KAAK,GAAL,CAAS,OAAT,CAAxB,CAA7E,CAAP,CAAP,CADF;;AA5IF,SA+IO,sBAAL;AACE,aAAO,OAAO,EAAE,oBAAF,CAAuB,KAAK,QAAL,EAAe,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,MAAT,CAAvB,CAAtC,EAAgF,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,OAAT,CAAvB,CAAhF,CAAP,CAAP,CADF;;AA/IF,SAkJO,kBAAL;AACE,aAAO,OAAO,EAAE,gBAAF,CAAmB,KAAK,QAAL,EAAe,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,UAAT,CAAvB,CAAlC,EAAgF,KAAK,MAAL,CAAvF,CAAP,CADF;;AAlJF,SAqJO,iBAAL;AACE,cAAQ,KAAR,CADF;AAEE,UAAI,MAAM,KAAK,QAAL,IAAiB,KAAK,iBAAL,CAAuB,KAAK,GAAL,CAAS,UAAT,CAAvB,CAAjB,CAFZ;;AAIE,UAAI,OAAO,KAAK,QAAL,EAAe;AACxB,YAAI,UAAU,KAAK,WAAL,EAAV,CADoB;;AAGxB,aAAK,IAAL,CAAU,EAAE,eAAF,CAAkB,EAAE,cAAF,CAAiB,KAAK,eAAL,CAAqB,eAArB,CAAjB,EAAwD,CAAC,GAAD,EAAM,EAAE,aAAF,CAAgB,QAAQ,QAAR,CAAiB,IAAjB,CAAtB,EAA8C,KAA9C,CAAxD,CAAlB,CAAV,EAHwB;;AAKxB,aAAK,IAAL,CAAU,KAAV,EALwB;;AAOxB,eAAO,OAAP,CAPwB;OAA1B;;AAUA,WAAK,UAAL,CAAgB,KAAK,eAAL,CAAqB,MAArB,CAAhB,EAA8C,KAA9C,EAdF;AAeE,WAAK,IAAL,CAAU,EAAE,eAAF,CAAkB,OAAO,IAAP,CAA5B,EAfF;AAgBE,WAAK,IAAL,CAAU,KAAV,EAhBF;;AAkBE,aAAO,KAAK,eAAL,CAAqB,MAArB,CAAP,CAlBF;;AArJF;AA0KI,YAAM,IAAI,KAAJ,CAAU,gCAAgC,KAAK,SAAL,CAAe,KAAK,IAAL,CAA/C,CAAhB,CADF;AAzKF,GAvEmD;CAA9B","file":"emit-compiled.js","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"babel-runtime/helpers/interop-require-default\")[\"default\"];\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nvar _assert = require(\"assert\");\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nvar _leap = require(\"./leap\");\n\nvar leap = _interopRequireWildcard(_leap);\n\nvar _meta = require(\"./meta\");\n\nvar meta = _interopRequireWildcard(_meta);\n\nvar _util = require(\"./util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  _assert2[\"default\"].ok(this instanceof Emitter);\n  t.assertIdentifier(contextId);\n\n  // Used to generate unique temporary names.\n  this.nextTempId = 0;\n\n  // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n  this.contextId = contextId;\n\n  // An append-only list of Statements that grows each time this.emit is\n  // called.\n  this.listing = [];\n\n  // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n  this.marked = [true];\n\n  // The last location will be marked when this.getDispatchLoop is\n  // called.\n  this.finalLoc = loc();\n\n  // A list of all leap.TryEntry statements emitted.\n  this.tryEntries = [];\n\n  // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n  this.leapManager = new leap.LeapManager(this);\n}\n\nvar Ep = Emitter.prototype;\nexports.Emitter = Emitter;\n\n// Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\nfunction loc() {\n  return t.numericLiteral(-1);\n}\n\n// Sets the exact value of the given location to the offset of the next\n// Statement emitted.\nEp.mark = function (loc) {\n  t.assertLiteral(loc);\n  var index = this.listing.length;\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    _assert2[\"default\"].strictEqual(loc.value, index);\n  }\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function (node) {\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n};\n\n// Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\nEp.emitAssign = function (lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n};\n\n// Shorthand for an assignment statement.\nEp.assign = function (lhs, rhs) {\n  return t.expressionStatement(t.assignmentExpression(\"=\", lhs, rhs));\n};\n\n// Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\nEp.contextProperty = function (name, computed) {\n  return t.memberExpression(this.contextId, computed ? t.stringLiteral(name) : t.identifier(name), !!computed);\n};\n\n// Shorthand for setting context.rval and jumping to `context.stop()`.\nEp.stop = function (rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function (valuePath) {\n  t.assertExpression(valuePath.value);\n\n  this.emitAssign(this.contextProperty(\"rval\"), this.explodeExpression(valuePath));\n};\n\nEp.clearPendingException = function (tryLoc, assignee) {\n  t.assertLiteral(tryLoc);\n\n  var catchCall = t.callExpression(this.contextProperty(\"catch\", true), [tryLoc]);\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n};\n\n// Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\nEp.jump = function (toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(t.breakStatement());\n};\n\n// Conditional jump.\nEp.jumpIf = function (test, toLoc) {\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n\n  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n};\n\n// Conditional jump, with the condition negated.\nEp.jumpIfNot = function (test, toLoc) {\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n\n  var negatedTest = undefined;\n  if (t.isUnaryExpression(test) && test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n};\n\n// Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\nEp.makeTempVar = function () {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function (id) {\n  return t.functionExpression(id || null, /*Anonymous*/\n  [this.contextId], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!\n  false // Nor an expression.\n  );\n};\n\n// Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\nEp.getDispatchLoop = function () {\n  var self = this;\n  var cases = [];\n  var current = undefined;\n\n  // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n  var alreadyEnded = false;\n\n  self.listing.forEach(function (stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(t.numericLiteral(i), current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt)) alreadyEnded = true;\n    }\n  });\n\n  // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n  this.finalLoc.value = this.listing.length;\n\n  cases.push(t.switchCase(this.finalLoc, [\n    // Intentionally fall through to the \"end\" case...\n  ]),\n\n  // So that the runtime can jump to the final location without having\n  // to know its offset, we provide the \"end\" case as a synonym.\n  t.switchCase(t.stringLiteral(\"end\"), [\n  // This will check/clear both context.thrown and context.rval.\n  t.returnStatement(t.callExpression(this.contextProperty(\"stop\"), []))]));\n\n  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression(\"=\", this.contextProperty(\"prev\"), this.contextProperty(\"next\")), cases));\n};\n\nEp.getTryLocsList = function () {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  var lastLocValue = 0;\n\n  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {\n    var thisLocValue = tryEntry.firstLoc.value;\n    _assert2[\"default\"].ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n    lastLocValue = thisLocValue;\n\n    var ce = tryEntry.catchEntry;\n    var fe = tryEntry.finallyEntry;\n\n    var locs = [tryEntry.firstLoc,\n    // The null here makes a hole in the array.\n    ce ? ce.firstLoc : null];\n\n    if (fe) {\n      locs[2] = fe.firstLoc;\n      locs[3] = fe.afterLoc;\n    }\n\n    return t.arrayExpression(locs);\n  }));\n};\n\n// All side effects must be realized in order.\n\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n\n// No destructive modification of AST nodes.\n\nEp.explode = function (path, ignoreResult) {\n  var node = path.node;\n  var self = this;\n\n  t.assertNode(node);\n\n  if (t.isDeclaration(node)) throw getDeclError(node);\n\n  if (t.isStatement(node)) return self.explodeStatement(path);\n\n  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n    case \"Program\":\n      return path.get(\"body\").map(self.explodeStatement, self);\n\n    case \"VariableDeclarator\":\n      throw getDeclError(node);\n\n    // These node types should be handled by their parent nodes\n    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n    case \"Property\":\n    case \"SwitchCase\":\n    case \"CatchClause\":\n      throw new Error(node.type + \" nodes should be handled by their parents\");\n\n    default:\n      throw new Error(\"unknown Node of type \" + JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\"all declarations should have been transformed into \" + \"assignments before the Exploder began its work: \" + JSON.stringify(node));\n}\n\nEp.explodeStatement = function (path, labelId) {\n  var stmt = path.node;\n  var self = this;\n  var before = undefined,\n      after = undefined,\n      head = undefined;\n\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  }\n\n  // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n    case \"ExpressionStatement\":\n      self.explodeExpression(path.get(\"expression\"), true);\n      break;\n\n    case \"LabeledStatement\":\n      after = loc();\n\n      // Did you know you can break from any labeled block statement or\n      // control structure? Well, you can! Note: when a labeled loop is\n      // encountered, the leap.LabeledEntry created here will immediately\n      // enclose a leap.LoopEntry on the leap manager's stack, and both\n      // entries will have the same label. Though this works just fine, it\n      // may seem a bit redundant. In theory, we could check here to\n      // determine if stmt knows how to handle its own label; for example,\n      // stmt happens to be a WhileStatement and so we know it's going to\n      // establish its own LoopEntry when we explode it (below). Then this\n      // LabeledEntry would be unnecessary. Alternatively, we might be\n      // tempted not to pass stmt.label down into self.explodeStatement,\n      // because we've handled the label here, but that's a mistake because\n      // labeled loops may contain labeled continue statements, which is not\n      // something we can handle in this generic case. All in all, I think a\n      // little redundancy greatly simplifies the logic of this case, since\n      // it's clear that we handle all possible LabeledStatements correctly\n      // here, regardless of whether they interact with the leap manager\n      // themselves. Also remember that labels and break/continue-to-label\n      // statements are rare, and all of this logic happens at transform\n      // time, so it has no additional runtime cost.\n      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      });\n\n      self.mark(after);\n\n      break;\n\n    case \"WhileStatement\":\n      before = loc();\n      after = loc();\n\n      self.mark(before);\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(before);\n      self.mark(after);\n\n      break;\n\n    case \"DoWhileStatement\":\n      var first = loc();\n      var test = loc();\n      after = loc();\n\n      self.mark(first);\n      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {\n        self.explode(path.get(\"body\"));\n      });\n      self.mark(test);\n      self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n      self.mark(after);\n\n      break;\n\n    case \"ForStatement\":\n      head = loc();\n      var update = loc();\n      after = loc();\n\n      if (stmt.init) {\n        // We pass true here to indicate that if stmt.init is an expression\n        // then we do not care about its result.\n        self.explode(path.get(\"init\"), true);\n      }\n\n      self.mark(head);\n\n      if (stmt.test) {\n        self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      } else {\n        // No test means continue unconditionally.\n      }\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n\n      self.mark(update);\n\n      if (stmt.update) {\n        // We pass true here to indicate that if stmt.update is an\n        // expression then we do not care about its result.\n        self.explode(path.get(\"update\"), true);\n      }\n\n      self.jump(head);\n\n      self.mark(after);\n\n      break;\n\n    case \"TypeCastExpression\":\n      return self.explodeExpression(path.get(\"expression\"));\n\n    case \"ForInStatement\":\n      head = loc();\n      after = loc();\n\n      var keyIterNextFn = self.makeTempVar();\n      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty(\"keys\"), [self.explodeExpression(path.get(\"right\"))]));\n\n      self.mark(head);\n\n      var keyInfoTmpVar = self.makeTempVar();\n      self.jumpIf(t.memberExpression(t.assignmentExpression(\"=\", keyInfoTmpVar, t.callExpression(keyIterNextFn, [])), t.identifier(\"done\"), false), after);\n\n      self.emitAssign(stmt.left, t.memberExpression(keyInfoTmpVar, t.identifier(\"value\"), false));\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n\n      self.jump(head);\n\n      self.mark(after);\n\n      break;\n\n    case \"BreakStatement\":\n      self.emitAbruptCompletion({\n        type: \"break\",\n        target: self.leapManager.getBreakLoc(stmt.label)\n      });\n\n      break;\n\n    case \"ContinueStatement\":\n      self.emitAbruptCompletion({\n        type: \"continue\",\n        target: self.leapManager.getContinueLoc(stmt.label)\n      });\n\n      break;\n\n    case \"SwitchStatement\":\n      // Always save the discriminant into a temporary variable in case the\n      // test expressions overwrite values like context.sent.\n      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get(\"discriminant\")));\n\n      after = loc();\n      var defaultLoc = loc();\n      var condition = defaultLoc;\n      var caseLocs = [];\n\n      // If there are no cases, .cases might be undefined.\n      var cases = stmt.cases || [];\n\n      for (var i = cases.length - 1; i >= 0; --i) {\n        var c = cases[i];\n        t.assertSwitchCase(c);\n\n        if (c.test) {\n          condition = t.conditionalExpression(t.binaryExpression(\"===\", disc, c.test), caseLocs[i] = loc(), condition);\n        } else {\n          caseLocs[i] = defaultLoc;\n        }\n      }\n\n      var discriminant = path.get(\"discriminant\");\n      discriminant.replaceWith(condition);\n      self.jump(self.explodeExpression(discriminant));\n\n      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {\n        path.get(\"cases\").forEach(function (casePath) {\n          var i = casePath.key;\n          self.mark(caseLocs[i]);\n\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      });\n\n      self.mark(after);\n      if (defaultLoc.value === -1) {\n        self.mark(defaultLoc);\n        _assert2[\"default\"].strictEqual(after.value, defaultLoc.value);\n      }\n\n      break;\n\n    case \"IfStatement\":\n      var elseLoc = stmt.alternate && loc();\n      after = loc();\n\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), elseLoc || after);\n\n      self.explodeStatement(path.get(\"consequent\"));\n\n      if (elseLoc) {\n        self.jump(after);\n        self.mark(elseLoc);\n        self.explodeStatement(path.get(\"alternate\"));\n      }\n\n      self.mark(after);\n\n      break;\n\n    case \"ReturnStatement\":\n      self.emitAbruptCompletion({\n        type: \"return\",\n        value: self.explodeExpression(path.get(\"argument\"))\n      });\n\n      break;\n\n    case \"WithStatement\":\n      throw new Error(\"WithStatement not supported in generator functions.\");\n\n    case \"TryStatement\":\n      after = loc();\n\n      var handler = stmt.handler;\n\n      var catchLoc = handler && loc();\n      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);\n\n      var finallyLoc = stmt.finalizer && loc();\n      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);\n\n      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);\n\n      self.tryEntries.push(tryEntry);\n      self.updateContextPrevLoc(tryEntry.firstLoc);\n\n      self.leapManager.withEntry(tryEntry, function () {\n        self.explodeStatement(path.get(\"block\"));\n\n        if (catchLoc) {\n          (function () {\n            if (finallyLoc) {\n              // If we have both a catch block and a finally block, then\n              // because we emit the catch block first, we need to jump over\n              // it to the finally block.\n              self.jump(finallyLoc);\n            } else {\n              // If there is no finally block, then we need to jump over the\n              // catch block to the fall-through location.\n              self.jump(after);\n            }\n\n            self.updateContextPrevLoc(self.mark(catchLoc));\n\n            var bodyPath = path.get(\"handler.body\");\n            var safeParam = self.makeTempVar();\n            self.clearPendingException(tryEntry.firstLoc, safeParam);\n\n            bodyPath.traverse(catchParamVisitor, {\n              safeParam: safeParam,\n              catchParamName: handler.param.name\n            });\n\n            self.leapManager.withEntry(catchEntry, function () {\n              self.explodeStatement(bodyPath);\n            });\n          })();\n        }\n\n        if (finallyLoc) {\n          self.updateContextPrevLoc(self.mark(finallyLoc));\n\n          self.leapManager.withEntry(finallyEntry, function () {\n            self.explodeStatement(path.get(\"finalizer\"));\n          });\n\n          self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"finish\"), [finallyEntry.firstLoc])));\n        }\n      });\n\n      self.mark(after);\n\n      break;\n\n    case \"ThrowStatement\":\n      self.emit(t.throwStatement(self.explodeExpression(path.get(\"argument\"))));\n\n      break;\n\n    default:\n      throw new Error(\"unknown Statement of type \" + JSON.stringify(stmt.type));\n  }\n};\n\nvar catchParamVisitor = {\n  Identifier: function Identifier(path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      path.replaceWith(state.safeParam);\n    }\n  },\n\n  Scope: function Scope(path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function (record) {\n  if (!isValidCompletion(record)) {\n    _assert2[\"default\"].ok(false, \"invalid completion record: \" + JSON.stringify(record));\n  }\n\n  _assert2[\"default\"].notStrictEqual(record.type, \"normal\", \"normal completions are not abrupt\");\n\n  var abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" || record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = record.target;\n  } else if (record.type === \"return\" || record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = record.value;\n    }\n  }\n\n  this.emit(t.returnStatement(t.callExpression(this.contextProperty(\"abrupt\"), abruptArgs)));\n};\n\nfunction isValidCompletion(record) {\n  var type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" || type === \"continue\") {\n    return !hasOwn.call(record, \"value\") && t.isLiteral(record.target);\n  }\n\n  if (type === \"return\" || type === \"throw\") {\n    return hasOwn.call(record, \"value\") && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n}\n\n// Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\nEp.getUnmarkedCurrentLoc = function () {\n  return t.numericLiteral(this.listing.length);\n};\n\n// The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\nEp.updateContextPrevLoc = function (loc) {\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      _assert2[\"default\"].strictEqual(loc.value, this.listing.length);\n    }\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  }\n\n  // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\nEp.explodeExpression = function (path, ignoreResult) {\n  var expr = path.node;\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  var self = this;\n  var result = undefined; // Used optionally by several cases below.\n  var after = undefined;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n    if (ignoreResult) {\n      self.emit(expr);\n    } else {\n      return expr;\n    }\n  }\n\n  // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  }\n\n  // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);\n\n  // In order to save the rest of explodeExpression from a combinatorial\n  // trainwreck of special cases, explodeViaTempVar is responsible for\n  // deciding when a subexpression needs to be \"exploded,\" which is my\n  // very technical term for emitting the subexpression as an assignment\n  // to a temporary variable and the substituting the temporary variable\n  // for the original subexpression. Think of exploded view diagrams, not\n  // Michael Bay movies. The point of exploding subexpressions is to\n  // control the precise order in which the generated code realizes the\n  // side effects of those subexpressions.\n  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {\n    _assert2[\"default\"].ok(!ignoreChildResult || !tempVar, \"Ignoring the result of a child expression but forcing it to \" + \"be assigned to a temporary variable?\");\n\n    var result = self.explodeExpression(childPath, ignoreChildResult);\n\n    if (ignoreChildResult) {\n      // Side effects already emitted above.\n\n    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {\n        // If tempVar was provided, then the result will always be assigned\n        // to it, even if the result does not otherwise need to be assigned\n        // to a temporary variable.  When no tempVar is provided, we have\n        // the flexibility to decide whether a temporary variable is really\n        // necessary.  Unfortunately, in general, a temporary variable is\n        // required whenever any child contains a yield expression, since it\n        // is difficult to prove (at all, let alone efficiently) whether\n        // this result would evaluate to the same value before and after the\n        // yield (see #206).  One narrow case where we can prove it doesn't\n        // matter (and thus we do not need a temporary variable) is when the\n        // result in question is a Literal value.\n        result = self.emitAssign(tempVar || self.makeTempVar(), result);\n      }\n    return result;\n  }\n\n  // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n  switch (expr.type) {\n    case \"MemberExpression\":\n      return finish(t.memberExpression(self.explodeExpression(path.get(\"object\")), expr.computed ? explodeViaTempVar(null, path.get(\"property\")) : expr.property, expr.computed));\n\n    case \"CallExpression\":\n      var calleePath = path.get(\"callee\");\n      var argsPath = path.get(\"arguments\");\n\n      var newCallee = undefined;\n      var newArgs = [];\n\n      var hasLeapingArgs = false;\n      argsPath.forEach(function (argPath) {\n        hasLeapingArgs = hasLeapingArgs || meta.containsLeap(argPath.node);\n      });\n\n      if (t.isMemberExpression(calleePath.node)) {\n        if (hasLeapingArgs) {\n          // If the arguments of the CallExpression contained any yield\n          // expressions, then we need to be sure to evaluate the callee\n          // before evaluating the arguments, but if the callee was a member\n          // expression, then we must be careful that the object of the\n          // member expression still gets bound to `this` for the call.\n\n          var newObject = explodeViaTempVar(\n          // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(), calleePath.get(\"object\"));\n\n          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get(\"property\")) : calleePath.node.property;\n\n          newArgs.unshift(newObject);\n\n          newCallee = t.memberExpression(t.memberExpression(newObject, newProperty, calleePath.node.computed), t.identifier(\"call\"), false);\n        } else {\n          newCallee = self.explodeExpression(calleePath);\n        }\n      } else {\n        newCallee = self.explodeExpression(calleePath);\n\n        if (t.isMemberExpression(newCallee)) {\n          // If the callee was not previously a MemberExpression, then the\n          // CallExpression was \"unqualified,\" meaning its `this` object\n          // should be the global object. If the exploded expression has\n          // become a MemberExpression (e.g. a context property, probably a\n          // temporary variable), then we need to force it to be unqualified\n          // by using the (0, object.property)(...) trick; otherwise, it\n          // will receive the object of the MemberExpression as its `this`\n          // object.\n          newCallee = t.sequenceExpression([t.numericLiteral(0), newCallee]);\n        }\n      }\n\n      argsPath.forEach(function (argPath) {\n        newArgs.push(explodeViaTempVar(null, argPath));\n      });\n\n      return finish(t.callExpression(newCallee, newArgs));\n\n    case \"NewExpression\":\n      return finish(t.newExpression(explodeViaTempVar(null, path.get(\"callee\")), path.get(\"arguments\").map(function (argPath) {\n        return explodeViaTempVar(null, argPath);\n      })));\n\n    case \"ObjectExpression\":\n      return finish(t.objectExpression(path.get(\"properties\").map(function (propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get(\"value\")), propPath.node.computed);\n        } else {\n          return propPath.node;\n        }\n      })));\n\n    case \"ArrayExpression\":\n      return finish(t.arrayExpression(path.get(\"elements\").map(function (elemPath) {\n        return explodeViaTempVar(null, elemPath);\n      })));\n\n    case \"SequenceExpression\":\n      var lastIndex = expr.expressions.length - 1;\n\n      path.get(\"expressions\").forEach(function (exprPath) {\n        if (exprPath.key === lastIndex) {\n          result = self.explodeExpression(exprPath, ignoreResult);\n        } else {\n          self.explodeExpression(exprPath, true);\n        }\n      });\n\n      return result;\n\n    case \"LogicalExpression\":\n      after = loc();\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      var left = explodeViaTempVar(result, path.get(\"left\"));\n\n      if (expr.operator === \"&&\") {\n        self.jumpIfNot(left, after);\n      } else {\n        _assert2[\"default\"].strictEqual(expr.operator, \"||\");\n        self.jumpIf(left, after);\n      }\n\n      explodeViaTempVar(result, path.get(\"right\"), ignoreResult);\n\n      self.mark(after);\n\n      return result;\n\n    case \"ConditionalExpression\":\n      var elseLoc = loc();\n      after = loc();\n      var test = self.explodeExpression(path.get(\"test\"));\n\n      self.jumpIfNot(test, elseLoc);\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      explodeViaTempVar(result, path.get(\"consequent\"), ignoreResult);\n      self.jump(after);\n\n      self.mark(elseLoc);\n      explodeViaTempVar(result, path.get(\"alternate\"), ignoreResult);\n\n      self.mark(after);\n\n      return result;\n\n    case \"UnaryExpression\":\n      return finish(t.unaryExpression(expr.operator,\n      // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")), !!expr.prefix));\n\n    case \"BinaryExpression\":\n      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get(\"left\")), explodeViaTempVar(null, path.get(\"right\"))));\n\n    case \"AssignmentExpression\":\n      return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get(\"left\")), self.explodeExpression(path.get(\"right\"))));\n\n    case \"UpdateExpression\":\n      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get(\"argument\")), expr.prefix));\n\n    case \"YieldExpression\":\n      after = loc();\n      var arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n      if (arg && expr.delegate) {\n        var _result = self.makeTempVar();\n\n        self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"delegateYield\"), [arg, t.stringLiteral(_result.property.name), after])));\n\n        self.mark(after);\n\n        return _result;\n      }\n\n      self.emitAssign(self.contextProperty(\"next\"), after);\n      self.emit(t.returnStatement(arg || null));\n      self.mark(after);\n\n      return self.contextProperty(\"sent\");\n\n    default:\n      throw new Error(\"unknown Expression of type \" + JSON.stringify(expr.type));\n  }\n};"]}