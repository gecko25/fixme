{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\nvar escapeStringRegexp = require('escape-string-regexp');\nvar ansiStyles = require('ansi-styles');\nvar stripAnsi = require('strip-ansi');\nvar hasAnsi = require('has-ansi');\nvar supportsColor = require('supports-color');\nvar defineProps = Object.defineProperties;\nvar isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);\n\nfunction Chalk(options) {\n\t// detect mode if not set manually\n\tthis.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;\n}\n\n// use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001b[94m';\n}\n\nvar styles = (function () {\n\tvar ret = {};\n\n\tObject.keys(ansiStyles).forEach(function (key) {\n\t\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\t\tret[key] = {\n\t\t\tget: function () {\n\t\t\t\treturn build.call(this, this._styles.concat(key));\n\t\t\t}\n\t\t};\n\t});\n\n\treturn ret;\n})();\n\nvar proto = defineProps(function chalk() {}, styles);\n\nfunction build(_styles) {\n\tvar builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\tbuilder.enabled = this.enabled;\n\t// __proto__ is used because we must return a function, but there is\n\t// no way to create a function with a different prototype.\n\t/* eslint-disable no-proto */\n\tbuilder.__proto__ = proto;\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// support varags, but simply cast to string in case there's only one arg\n\tvar args = arguments;\n\tvar argsLen = args.length;\n\tvar str = argsLen !== 0 && String(arguments[0]);\n\n\tif (argsLen > 1) {\n\t\t// don't slice `arguments`, it prevents v8 optimizations\n\t\tfor (var a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || !str) {\n\t\treturn str;\n\t}\n\n\tvar nestedStyles = this._styles;\n\tvar i = nestedStyles.length;\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tvar originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\twhile (i--) {\n\t\tvar code = ansiStyles[nestedStyles[i]];\n\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\t}\n\n\t// Reset the original 'dim' if we changed it to work around the Windows dimmed gray issue.\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction init() {\n\tvar ret = {};\n\n\tObject.keys(styles).forEach(function (name) {\n\t\tret[name] = {\n\t\t\tget: function () {\n\t\t\t\treturn build.call(this, [name]);\n\t\t\t}\n\t\t};\n\t});\n\n\treturn ret;\n}\n\ndefineProps(Chalk.prototype, init());\n\nmodule.exports = new Chalk();\nmodule.exports.styles = ansiStyles;\nmodule.exports.hasColor = hasAnsi;\nmodule.exports.stripColor = stripAnsi;\nmodule.exports.supportsColor = supportsColor;\n"]}